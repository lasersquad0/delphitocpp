#line 2 "lex.cxx"

#line 4 "lex.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef const struct yy_trans_info *yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static const struct yy_trans_info yy_transition[7533] =
    {
 {   0,   0 }, {   0,7277 }, {   0,   0 }, {   0,7275 }, {   1,1548 },
 {   2,1548 }, {   3,1548 }, {   4,1548 }, {   5,1548 }, {   6,1548 },
 {   7,1548 }, {   8,1548 }, {   9,1550 }, {  10,1552 }, {  11,1548 },
 {  12,1550 }, {  13,1548 }, {  14,1548 }, {  15,1548 }, {  16,1548 },
 {  17,1548 }, {  18,1548 }, {  19,1548 }, {  20,1548 }, {  21,1548 },
 {  22,1548 }, {  23,1548 }, {  24,1548 }, {  25,1548 }, {  26,1548 },
 {  27,1548 }, {  28,1548 }, {  29,1548 }, {  30,1548 }, {  31,1548 },
 {  32,1550 }, {  33,1548 }, {  34,1548 }, {  35,1554 }, {  36,1565 },
 {  37,1657 }, {  38,1689 }, {  39,1764 }, {  40,1691 }, {  41,1693 },
 {  42,1695 }, {  43,1697 }, {  44,1699 }, {  45,2022 }, {  46,2024 },

 {  47,2026 }, {  48,2040 }, {  49,2099 }, {  50,2158 }, {  51,2158 },
 {  52,2158 }, {  53,2158 }, {  54,2158 }, {  55,2158 }, {  56,2158 },
 {  57,2158 }, {  58,2042 }, {  59,2044 }, {  60,2053 }, {  61,2055 },
 {  62,2057 }, {  63,1548 }, {  64,2059 }, {  65,2218 }, {  66,2218 },
 {  67,2218 }, {  68,2218 }, {  69,2218 }, {  70,2218 }, {  71,2218 },
 {  72,2218 }, {  73,2218 }, {  74,2218 }, {  75,2218 }, {  76,2218 },
 {  77,2218 }, {  78,2218 }, {  79,2218 }, {  80,2218 }, {  81,2218 },
 {  82,2218 }, {  83,2218 }, {  84,2218 }, {  85,2310 }, {  86,2218 },
 {  87,2218 }, {  88,2218 }, {  89,2218 }, {  90,2218 }, {  91,2061 },
 {  92,1548 }, {  93,2063 }, {  94,2067 }, {  95,2218 }, {  96,1548 },

 {  97,2218 }, {  98,2218 }, {  99,2218 }, { 100,2218 }, { 101,2218 },
 { 102,2218 }, { 103,2218 }, { 104,2218 }, { 105,2218 }, { 106,2218 },
 { 107,2218 }, { 108,2218 }, { 109,2218 }, { 110,2218 }, { 111,2218 },
 { 112,2218 }, { 113,2218 }, { 114,2218 }, { 115,2218 }, { 116,2218 },
 { 117,2310 }, { 118,2218 }, { 119,2218 }, { 120,2218 }, { 121,2218 },
 { 122,2218 }, { 123,2080 }, { 124,2082 }, { 125,1548 }, { 126,2085 },
 { 127,1548 }, { 128,1548 }, { 129,1548 }, { 130,1548 }, { 131,1548 },
 { 132,1548 }, { 133,1548 }, { 134,1548 }, { 135,1548 }, { 136,1548 },
 { 137,1548 }, { 138,1548 }, { 139,1548 }, { 140,1548 }, { 141,1548 },
 { 142,1548 }, { 143,1548 }, { 144,1548 }, { 145,1548 }, { 146,1548 },

 { 147,1548 }, { 148,1548 }, { 149,1548 }, { 150,1548 }, { 151,1548 },
 { 152,1548 }, { 153,1548 }, { 154,1548 }, { 155,1548 }, { 156,1548 },
 { 157,1548 }, { 158,1548 }, { 159,1548 }, { 160,1548 }, { 161,1548 },
 { 162,1548 }, { 163,1548 }, { 164,1548 }, { 165,1548 }, { 166,1548 },
 { 167,1548 }, { 168,1548 }, { 169,1548 }, { 170,1548 }, { 171,1548 },
 { 172,1548 }, { 173,1548 }, { 174,1548 }, { 175,1548 }, { 176,1548 },
 { 177,1548 }, { 178,1548 }, { 179,1548 }, { 180,1548 }, { 181,1548 },
 { 182,1548 }, { 183,1548 }, { 184,1548 }, { 185,1548 }, { 186,1548 },
 { 187,1548 }, { 188,1548 }, { 189,1548 }, { 190,1548 }, { 191,1548 },
 { 192,1548 }, { 193,1548 }, { 194,1548 }, { 195,1548 }, { 196,1548 },

 { 197,1548 }, { 198,1548 }, { 199,1548 }, { 200,1548 }, { 201,1548 },
 { 202,1548 }, { 203,1548 }, { 204,1548 }, { 205,1548 }, { 206,1548 },
 { 207,1548 }, { 208,1548 }, { 209,1548 }, { 210,1548 }, { 211,1548 },
 { 212,1548 }, { 213,1548 }, { 214,1548 }, { 215,1548 }, { 216,1548 },
 { 217,1548 }, { 218,1548 }, { 219,1548 }, { 220,1548 }, { 221,1548 },
 { 222,1548 }, { 223,1548 }, { 224,1548 }, { 225,1548 }, { 226,1548 },
 { 227,1548 }, { 228,1548 }, { 229,1548 }, { 230,1548 }, { 231,1548 },
 { 232,1548 }, { 233,1548 }, { 234,1548 }, { 235,1548 }, { 236,1548 },
 { 237,1548 }, { 238,1548 }, { 239,1548 }, { 240,1548 }, { 241,1548 },
 { 242,1548 }, { 243,1548 }, { 244,1548 }, { 245,1548 }, { 246,1548 },

 { 247,1548 }, { 248,1548 }, { 249,1548 }, { 250,1548 }, { 251,1548 },
 { 252,1548 }, { 253,1548 }, { 254,1548 }, { 255,1548 }, { 256,1548 },
 {   0,   0 }, {   0,7017 }, {   1,1290 }, {   2,1290 }, {   3,1290 },
 {   4,1290 }, {   5,1290 }, {   6,1290 }, {   7,1290 }, {   8,1290 },
 {   9,1292 }, {  10,1294 }, {  11,1290 }, {  12,1292 }, {  13,1290 },
 {  14,1290 }, {  15,1290 }, {  16,1290 }, {  17,1290 }, {  18,1290 },
 {  19,1290 }, {  20,1290 }, {  21,1290 }, {  22,1290 }, {  23,1290 },
 {  24,1290 }, {  25,1290 }, {  26,1290 }, {  27,1290 }, {  28,1290 },
 {  29,1290 }, {  30,1290 }, {  31,1290 }, {  32,1292 }, {  33,1290 },
 {  34,1290 }, {  35,1296 }, {  36,1307 }, {  37,1399 }, {  38,1431 },

 {  39,1506 }, {  40,1433 }, {  41,1435 }, {  42,1437 }, {  43,1439 },
 {  44,1441 }, {  45,1764 }, {  46,1766 }, {  47,1768 }, {  48,1782 },
 {  49,1841 }, {  50,1900 }, {  51,1900 }, {  52,1900 }, {  53,1900 },
 {  54,1900 }, {  55,1900 }, {  56,1900 }, {  57,1900 }, {  58,1784 },
 {  59,1786 }, {  60,1795 }, {  61,1797 }, {  62,1799 }, {  63,1290 },
 {  64,1801 }, {  65,1960 }, {  66,1960 }, {  67,1960 }, {  68,1960 },
 {  69,1960 }, {  70,1960 }, {  71,1960 }, {  72,1960 }, {  73,1960 },
 {  74,1960 }, {  75,1960 }, {  76,1960 }, {  77,1960 }, {  78,1960 },
 {  79,1960 }, {  80,1960 }, {  81,1960 }, {  82,1960 }, {  83,1960 },
 {  84,1960 }, {  85,2052 }, {  86,1960 }, {  87,1960 }, {  88,1960 },

 {  89,1960 }, {  90,1960 }, {  91,1803 }, {  92,1290 }, {  93,1805 },
 {  94,1809 }, {  95,1960 }, {  96,1290 }, {  97,1960 }, {  98,1960 },
 {  99,1960 }, { 100,1960 }, { 101,1960 }, { 102,1960 }, { 103,1960 },
 { 104,1960 }, { 105,1960 }, { 106,1960 }, { 107,1960 }, { 108,1960 },
 { 109,1960 }, { 110,1960 }, { 111,1960 }, { 112,1960 }, { 113,1960 },
 { 114,1960 }, { 115,1960 }, { 116,1960 }, { 117,2052 }, { 118,1960 },
 { 119,1960 }, { 120,1960 }, { 121,1960 }, { 122,1960 }, { 123,1822 },
 { 124,1824 }, { 125,1290 }, { 126,1827 }, { 127,1290 }, { 128,1290 },
 { 129,1290 }, { 130,1290 }, { 131,1290 }, { 132,1290 }, { 133,1290 },
 { 134,1290 }, { 135,1290 }, { 136,1290 }, { 137,1290 }, { 138,1290 },

 { 139,1290 }, { 140,1290 }, { 141,1290 }, { 142,1290 }, { 143,1290 },
 { 144,1290 }, { 145,1290 }, { 146,1290 }, { 147,1290 }, { 148,1290 },
 { 149,1290 }, { 150,1290 }, { 151,1290 }, { 152,1290 }, { 153,1290 },
 { 154,1290 }, { 155,1290 }, { 156,1290 }, { 157,1290 }, { 158,1290 },
 { 159,1290 }, { 160,1290 }, { 161,1290 }, { 162,1290 }, { 163,1290 },
 { 164,1290 }, { 165,1290 }, { 166,1290 }, { 167,1290 }, { 168,1290 },
 { 169,1290 }, { 170,1290 }, { 171,1290 }, { 172,1290 }, { 173,1290 },
 { 174,1290 }, { 175,1290 }, { 176,1290 }, { 177,1290 }, { 178,1290 },
 { 179,1290 }, { 180,1290 }, { 181,1290 }, { 182,1290 }, { 183,1290 },
 { 184,1290 }, { 185,1290 }, { 186,1290 }, { 187,1290 }, { 188,1290 },

 { 189,1290 }, { 190,1290 }, { 191,1290 }, { 192,1290 }, { 193,1290 },
 { 194,1290 }, { 195,1290 }, { 196,1290 }, { 197,1290 }, { 198,1290 },
 { 199,1290 }, { 200,1290 }, { 201,1290 }, { 202,1290 }, { 203,1290 },
 { 204,1290 }, { 205,1290 }, { 206,1290 }, { 207,1290 }, { 208,1290 },
 { 209,1290 }, { 210,1290 }, { 211,1290 }, { 212,1290 }, { 213,1290 },
 { 214,1290 }, { 215,1290 }, { 216,1290 }, { 217,1290 }, { 218,1290 },
 { 219,1290 }, { 220,1290 }, { 221,1290 }, { 222,1290 }, { 223,1290 },
 { 224,1290 }, { 225,1290 }, { 226,1290 }, { 227,1290 }, { 228,1290 },
 { 229,1290 }, { 230,1290 }, { 231,1290 }, { 232,1290 }, { 233,1290 },
 { 234,1290 }, { 235,1290 }, { 236,1290 }, { 237,1290 }, { 238,1290 },

 { 239,1290 }, { 240,1290 }, { 241,1290 }, { 242,1290 }, { 243,1290 },
 { 244,1290 }, { 245,1290 }, { 246,1290 }, { 247,1290 }, { 248,1290 },
 { 249,1290 }, { 250,1290 }, { 251,1290 }, { 252,1290 }, { 253,1290 },
 { 254,1290 }, { 255,1290 }, { 256,1290 }, {   0,   9 }, {   0,6759 },
 {   1,1918 }, {   2,1918 }, {   3,1918 }, {   4,1918 }, {   5,1918 },
 {   6,1918 }, {   7,1918 }, {   8,1918 }, {   9,2176 }, {  10,1647 },
 {  11,1918 }, {  12,1918 }, {  13,1918 }, {  14,1918 }, {  15,1918 },
 {  16,1918 }, {  17,1918 }, {  18,1918 }, {  19,1918 }, {  20,1918 },
 {  21,1918 }, {  22,1918 }, {  23,1918 }, {  24,1918 }, {  25,1918 },
 {  26,1918 }, {  27,1918 }, {  28,1918 }, {  29,1918 }, {  30,1918 },

 {  31,1918 }, {  32,2176 }, {  33,1918 }, {  34,1918 }, {  35,1918 },
 {  36,1918 }, {  37,1918 }, {  38,1918 }, {  39,1918 }, {  40,1918 },
 {  41,1918 }, {  42,1918 }, {  43,1918 }, {  44,1918 }, {  45,1918 },
 {  46,1918 }, {  47,1918 }, {  48,1918 }, {  49,1918 }, {  50,1918 },
 {  51,1918 }, {  52,1918 }, {  53,1918 }, {  54,1918 }, {  55,1918 },
 {  56,1918 }, {  57,1918 }, {  58,1918 }, {  59,1659 }, {  60,1918 },
 {  61,1918 }, {  62,1918 }, {  63,1918 }, {  64,1918 }, {  65,1918 },
 {  66,1918 }, {  67,1918 }, {  68,1918 }, {  69,1918 }, {  70,1918 },
 {  71,1918 }, {  72,1918 }, {  73,1918 }, {  74,1918 }, {  75,1918 },
 {  76,1918 }, {  77,1918 }, {  78,1918 }, {  79,1918 }, {  80,1918 },

 {  81,1918 }, {  82,1918 }, {  83,1918 }, {  84,1918 }, {  85,1918 },
 {  86,1918 }, {  87,1918 }, {  88,1918 }, {  89,1918 }, {  90,1918 },
 {  91,1918 }, {  92,1918 }, {  93,1918 }, {  94,1918 }, {  95,1918 },
 {  96,1918 }, {  97,1918 }, {  98,1918 }, {  99,1918 }, { 100,1918 },
 { 101,1918 }, { 102,1918 }, { 103,1918 }, { 104,1918 }, { 105,1918 },
 { 106,1918 }, { 107,1918 }, { 108,1918 }, { 109,1918 }, { 110,1918 },
 { 111,1918 }, { 112,1918 }, { 113,1918 }, { 114,1918 }, { 115,1918 },
 { 116,1918 }, { 117,1918 }, { 118,1918 }, { 119,1918 }, { 120,1918 },
 { 121,1918 }, { 122,1918 }, { 123,1918 }, { 124,1918 }, { 125,1918 },
 { 126,1918 }, { 127,1918 }, { 128,1918 }, { 129,1918 }, { 130,1918 },

 { 131,1918 }, { 132,1918 }, { 133,1918 }, { 134,1918 }, { 135,1918 },
 { 136,1918 }, { 137,1918 }, { 138,1918 }, { 139,1918 }, { 140,1918 },
 { 141,1918 }, { 142,1918 }, { 143,1918 }, { 144,1918 }, { 145,1918 },
 { 146,1918 }, { 147,1918 }, { 148,1918 }, { 149,1918 }, { 150,1918 },
 { 151,1918 }, { 152,1918 }, { 153,1918 }, { 154,1918 }, { 155,1918 },
 { 156,1918 }, { 157,1918 }, { 158,1918 }, { 159,1918 }, { 160,1918 },
 { 161,1918 }, { 162,1918 }, { 163,1918 }, { 164,1918 }, { 165,1918 },
 { 166,1918 }, { 167,1918 }, { 168,1918 }, { 169,1918 }, { 170,1918 },
 { 171,1918 }, { 172,1918 }, { 173,1918 }, { 174,1918 }, { 175,1918 },
 { 176,1918 }, { 177,1918 }, { 178,1918 }, { 179,1918 }, { 180,1918 },

 { 181,1918 }, { 182,1918 }, { 183,1918 }, { 184,1918 }, { 185,1918 },
 { 186,1918 }, { 187,1918 }, { 188,1918 }, { 189,1918 }, { 190,1918 },
 { 191,1918 }, { 192,1918 }, { 193,1918 }, { 194,1918 }, { 195,1918 },
 { 196,1918 }, { 197,1918 }, { 198,1918 }, { 199,1918 }, { 200,1918 },
 { 201,1918 }, { 202,1918 }, { 203,1918 }, { 204,1918 }, { 205,1918 },
 { 206,1918 }, { 207,1918 }, { 208,1918 }, { 209,1918 }, { 210,1918 },
 { 211,1918 }, { 212,1918 }, { 213,1918 }, { 214,1918 }, { 215,1918 },
 { 216,1918 }, { 217,1918 }, { 218,1918 }, { 219,1918 }, { 220,1918 },
 { 221,1918 }, { 222,1918 }, { 223,1918 }, { 224,1918 }, { 225,1918 },
 { 226,1918 }, { 227,1918 }, { 228,1918 }, { 229,1918 }, { 230,1918 },

 { 231,1918 }, { 232,1918 }, { 233,1918 }, { 234,1918 }, { 235,1918 },
 { 236,1918 }, { 237,1918 }, { 238,1918 }, { 239,1918 }, { 240,1918 },
 { 241,1918 }, { 242,1918 }, { 243,1918 }, { 244,1918 }, { 245,1918 },
 { 246,1918 }, { 247,1918 }, { 248,1918 }, { 249,1918 }, { 250,1918 },
 { 251,1918 }, { 252,1918 }, { 253,1918 }, { 254,1918 }, { 255,1918 },
 { 256,1918 }, {   0,   9 }, {   0,6501 }, {   1,1660 }, {   2,1660 },
 {   3,1660 }, {   4,1660 }, {   5,1660 }, {   6,1660 }, {   7,1660 },
 {   8,1660 }, {   9,1918 }, {  10,1389 }, {  11,1660 }, {  12,1660 },
 {  13,1660 }, {  14,1660 }, {  15,1660 }, {  16,1660 }, {  17,1660 },
 {  18,1660 }, {  19,1660 }, {  20,1660 }, {  21,1660 }, {  22,1660 },

 {  23,1660 }, {  24,1660 }, {  25,1660 }, {  26,1660 }, {  27,1660 },
 {  28,1660 }, {  29,1660 }, {  30,1660 }, {  31,1660 }, {  32,1918 },
 {  33,1660 }, {  34,1660 }, {  35,1660 }, {  36,1660 }, {  37,1660 },
 {  38,1660 }, {  39,1660 }, {  40,1660 }, {  41,1660 }, {  42,1660 },
 {  43,1660 }, {  44,1660 }, {  45,1660 }, {  46,1660 }, {  47,1660 },
 {  48,1660 }, {  49,1660 }, {  50,1660 }, {  51,1660 }, {  52,1660 },
 {  53,1660 }, {  54,1660 }, {  55,1660 }, {  56,1660 }, {  57,1660 },
 {  58,1660 }, {  59,1401 }, {  60,1660 }, {  61,1660 }, {  62,1660 },
 {  63,1660 }, {  64,1660 }, {  65,1660 }, {  66,1660 }, {  67,1660 },
 {  68,1660 }, {  69,1660 }, {  70,1660 }, {  71,1660 }, {  72,1660 },

 {  73,1660 }, {  74,1660 }, {  75,1660 }, {  76,1660 }, {  77,1660 },
 {  78,1660 }, {  79,1660 }, {  80,1660 }, {  81,1660 }, {  82,1660 },
 {  83,1660 }, {  84,1660 }, {  85,1660 }, {  86,1660 }, {  87,1660 },
 {  88,1660 }, {  89,1660 }, {  90,1660 }, {  91,1660 }, {  92,1660 },
 {  93,1660 }, {  94,1660 }, {  95,1660 }, {  96,1660 }, {  97,1660 },
 {  98,1660 }, {  99,1660 }, { 100,1660 }, { 101,1660 }, { 102,1660 },
 { 103,1660 }, { 104,1660 }, { 105,1660 }, { 106,1660 }, { 107,1660 },
 { 108,1660 }, { 109,1660 }, { 110,1660 }, { 111,1660 }, { 112,1660 },
 { 113,1660 }, { 114,1660 }, { 115,1660 }, { 116,1660 }, { 117,1660 },
 { 118,1660 }, { 119,1660 }, { 120,1660 }, { 121,1660 }, { 122,1660 },

 { 123,1660 }, { 124,1660 }, { 125,1660 }, { 126,1660 }, { 127,1660 },
 { 128,1660 }, { 129,1660 }, { 130,1660 }, { 131,1660 }, { 132,1660 },
 { 133,1660 }, { 134,1660 }, { 135,1660 }, { 136,1660 }, { 137,1660 },
 { 138,1660 }, { 139,1660 }, { 140,1660 }, { 141,1660 }, { 142,1660 },
 { 143,1660 }, { 144,1660 }, { 145,1660 }, { 146,1660 }, { 147,1660 },
 { 148,1660 }, { 149,1660 }, { 150,1660 }, { 151,1660 }, { 152,1660 },
 { 153,1660 }, { 154,1660 }, { 155,1660 }, { 156,1660 }, { 157,1660 },
 { 158,1660 }, { 159,1660 }, { 160,1660 }, { 161,1660 }, { 162,1660 },
 { 163,1660 }, { 164,1660 }, { 165,1660 }, { 166,1660 }, { 167,1660 },
 { 168,1660 }, { 169,1660 }, { 170,1660 }, { 171,1660 }, { 172,1660 },

 { 173,1660 }, { 174,1660 }, { 175,1660 }, { 176,1660 }, { 177,1660 },
 { 178,1660 }, { 179,1660 }, { 180,1660 }, { 181,1660 }, { 182,1660 },
 { 183,1660 }, { 184,1660 }, { 185,1660 }, { 186,1660 }, { 187,1660 },
 { 188,1660 }, { 189,1660 }, { 190,1660 }, { 191,1660 }, { 192,1660 },
 { 193,1660 }, { 194,1660 }, { 195,1660 }, { 196,1660 }, { 197,1660 },
 { 198,1660 }, { 199,1660 }, { 200,1660 }, { 201,1660 }, { 202,1660 },
 { 203,1660 }, { 204,1660 }, { 205,1660 }, { 206,1660 }, { 207,1660 },
 { 208,1660 }, { 209,1660 }, { 210,1660 }, { 211,1660 }, { 212,1660 },
 { 213,1660 }, { 214,1660 }, { 215,1660 }, { 216,1660 }, { 217,1660 },
 { 218,1660 }, { 219,1660 }, { 220,1660 }, { 221,1660 }, { 222,1660 },

 { 223,1660 }, { 224,1660 }, { 225,1660 }, { 226,1660 }, { 227,1660 },
 { 228,1660 }, { 229,1660 }, { 230,1660 }, { 231,1660 }, { 232,1660 },
 { 233,1660 }, { 234,1660 }, { 235,1660 }, { 236,1660 }, { 237,1660 },
 { 238,1660 }, { 239,1660 }, { 240,1660 }, { 241,1660 }, { 242,1660 },
 { 243,1660 }, { 244,1660 }, { 245,1660 }, { 246,1660 }, { 247,1660 },
 { 248,1660 }, { 249,1660 }, { 250,1660 }, { 251,1660 }, { 252,1660 },
 { 253,1660 }, { 254,1660 }, { 255,1660 }, { 256,1660 }, {   0,   4 },
 {   0,6243 }, {   1,1145 }, {   2,1145 }, {   3,1145 }, {   4,1145 },
 {   5,1145 }, {   6,1145 }, {   7,1145 }, {   8,1145 }, {   9,1200 },
 {  10,1918 }, {  11,1145 }, {  12,1145 }, {  13,1145 }, {  14,1145 },

 {  15,1145 }, {  16,1145 }, {  17,1145 }, {  18,1145 }, {  19,1145 },
 {  20,1145 }, {  21,1145 }, {  22,1145 }, {  23,1145 }, {  24,1145 },
 {  25,1145 }, {  26,1145 }, {  27,1145 }, {  28,1145 }, {  29,1145 },
 {  30,1145 }, {  31,1145 }, {  32,1200 }, {  33,1145 }, {  34,1145 },
 {  35,1145 }, {  36,1145 }, {  37,1145 }, {  38,1145 }, {  39,1145 },
 {  40,1145 }, {  41,1145 }, {  42,1145 }, {  43,1145 }, {  44,1200 },
 {  45,1145 }, {  46,1920 }, {  47,1145 }, {  48,1920 }, {  49,1920 },
 {  50,1920 }, {  51,1920 }, {  52,1920 }, {  53,1920 }, {  54,1920 },
 {  55,1920 }, {  56,1920 }, {  57,1920 }, {  58,1145 }, {  59,1922 },
 {  60,1145 }, {  61,1145 }, {  62,1145 }, {  63,1145 }, {  64,1145 },

 {  65,1920 }, {  66,1920 }, {  67,1920 }, {  68,1920 }, {  69,1920 },
 {  70,1920 }, {  71,1920 }, {  72,1920 }, {  73,1920 }, {  74,1920 },
 {  75,1920 }, {  76,1920 }, {  77,1920 }, {  78,1920 }, {  79,1920 },
 {  80,1920 }, {  81,1920 }, {  82,1920 }, {  83,1920 }, {  84,1920 },
 {  85,1920 }, {  86,1920 }, {  87,1920 }, {  88,1920 }, {  89,1920 },
 {  90,1920 }, {  91,1145 }, {  92,1145 }, {  93,1145 }, {  94,1145 },
 {  95,1920 }, {  96,1145 }, {  97,1920 }, {  98,1920 }, {  99,1920 },
 { 100,1920 }, { 101,1920 }, { 102,1920 }, { 103,1920 }, { 104,1920 },
 { 105,1920 }, { 106,1920 }, { 107,1920 }, { 108,1920 }, { 109,1920 },
 { 110,1920 }, { 111,1920 }, { 112,1920 }, { 113,1920 }, { 114,1920 },

 { 115,1920 }, { 116,1920 }, { 117,1920 }, { 118,1920 }, { 119,1920 },
 { 120,1920 }, { 121,1920 }, { 122,1920 }, { 123,2044 }, { 124,1145 },
 { 125,1145 }, { 126,1145 }, { 127,1145 }, { 128,1145 }, { 129,1145 },
 { 130,1145 }, { 131,1145 }, { 132,1145 }, { 133,1145 }, { 134,1145 },
 { 135,1145 }, { 136,1145 }, { 137,1145 }, { 138,1145 }, { 139,1145 },
 { 140,1145 }, { 141,1145 }, { 142,1145 }, { 143,1145 }, { 144,1145 },
 { 145,1145 }, { 146,1145 }, { 147,1145 }, { 148,1145 }, { 149,1145 },
 { 150,1145 }, { 151,1145 }, { 152,1145 }, { 153,1145 }, { 154,1145 },
 { 155,1145 }, { 156,1145 }, { 157,1145 }, { 158,1145 }, { 159,1145 },
 { 160,1145 }, { 161,1145 }, { 162,1145 }, { 163,1145 }, { 164,1145 },

 { 165,1145 }, { 166,1145 }, { 167,1145 }, { 168,1145 }, { 169,1145 },
 { 170,1145 }, { 171,1145 }, { 172,1145 }, { 173,1145 }, { 174,1145 },
 { 175,1145 }, { 176,1145 }, { 177,1145 }, { 178,1145 }, { 179,1145 },
 { 180,1145 }, { 181,1145 }, { 182,1145 }, { 183,1145 }, { 184,1145 },
 { 185,1145 }, { 186,1145 }, { 187,1145 }, { 188,1145 }, { 189,1145 },
 { 190,1145 }, { 191,1145 }, { 192,1145 }, { 193,1145 }, { 194,1145 },
 { 195,1145 }, { 196,1145 }, { 197,1145 }, { 198,1145 }, { 199,1145 },
 { 200,1145 }, { 201,1145 }, { 202,1145 }, { 203,1145 }, { 204,1145 },
 { 205,1145 }, { 206,1145 }, { 207,1145 }, { 208,1145 }, { 209,1145 },
 { 210,1145 }, { 211,1145 }, { 212,1145 }, { 213,1145 }, { 214,1145 },

 { 215,1145 }, { 216,1145 }, { 217,1145 }, { 218,1145 }, { 219,1145 },
 { 220,1145 }, { 221,1145 }, { 222,1145 }, { 223,1145 }, { 224,1145 },
 { 225,1145 }, { 226,1145 }, { 227,1145 }, { 228,1145 }, { 229,1145 },
 { 230,1145 }, { 231,1145 }, { 232,1145 }, { 233,1145 }, { 234,1145 },
 { 235,1145 }, { 236,1145 }, { 237,1145 }, { 238,1145 }, { 239,1145 },
 { 240,1145 }, { 241,1145 }, { 242,1145 }, { 243,1145 }, { 244,1145 },
 { 245,1145 }, { 246,1145 }, { 247,1145 }, { 248,1145 }, { 249,1145 },
 { 250,1145 }, { 251,1145 }, { 252,1145 }, { 253,1145 }, { 254,1145 },
 { 255,1145 }, { 256,1145 }, {   0,   4 }, {   0,5985 }, {   1, 887 },
 {   2, 887 }, {   3, 887 }, {   4, 887 }, {   5, 887 }, {   6, 887 },

 {   7, 887 }, {   8, 887 }, {   9, 942 }, {  10,1660 }, {  11, 887 },
 {  12, 887 }, {  13, 887 }, {  14, 887 }, {  15, 887 }, {  16, 887 },
 {  17, 887 }, {  18, 887 }, {  19, 887 }, {  20, 887 }, {  21, 887 },
 {  22, 887 }, {  23, 887 }, {  24, 887 }, {  25, 887 }, {  26, 887 },
 {  27, 887 }, {  28, 887 }, {  29, 887 }, {  30, 887 }, {  31, 887 },
 {  32, 942 }, {  33, 887 }, {  34, 887 }, {  35, 887 }, {  36, 887 },
 {  37, 887 }, {  38, 887 }, {  39, 887 }, {  40, 887 }, {  41, 887 },
 {  42, 887 }, {  43, 887 }, {  44, 942 }, {  45, 887 }, {  46,1662 },
 {  47, 887 }, {  48,1662 }, {  49,1662 }, {  50,1662 }, {  51,1662 },
 {  52,1662 }, {  53,1662 }, {  54,1662 }, {  55,1662 }, {  56,1662 },

 {  57,1662 }, {  58, 887 }, {  59,1664 }, {  60, 887 }, {  61, 887 },
 {  62, 887 }, {  63, 887 }, {  64, 887 }, {  65,1662 }, {  66,1662 },
 {  67,1662 }, {  68,1662 }, {  69,1662 }, {  70,1662 }, {  71,1662 },
 {  72,1662 }, {  73,1662 }, {  74,1662 }, {  75,1662 }, {  76,1662 },
 {  77,1662 }, {  78,1662 }, {  79,1662 }, {  80,1662 }, {  81,1662 },
 {  82,1662 }, {  83,1662 }, {  84,1662 }, {  85,1662 }, {  86,1662 },
 {  87,1662 }, {  88,1662 }, {  89,1662 }, {  90,1662 }, {  91, 887 },
 {  92, 887 }, {  93, 887 }, {  94, 887 }, {  95,1662 }, {  96, 887 },
 {  97,1662 }, {  98,1662 }, {  99,1662 }, { 100,1662 }, { 101,1662 },
 { 102,1662 }, { 103,1662 }, { 104,1662 }, { 105,1662 }, { 106,1662 },

 { 107,1662 }, { 108,1662 }, { 109,1662 }, { 110,1662 }, { 111,1662 },
 { 112,1662 }, { 113,1662 }, { 114,1662 }, { 115,1662 }, { 116,1662 },
 { 117,1662 }, { 118,1662 }, { 119,1662 }, { 120,1662 }, { 121,1662 },
 { 122,1662 }, { 123,1786 }, { 124, 887 }, { 125, 887 }, { 126, 887 },
 { 127, 887 }, { 128, 887 }, { 129, 887 }, { 130, 887 }, { 131, 887 },
 { 132, 887 }, { 133, 887 }, { 134, 887 }, { 135, 887 }, { 136, 887 },
 { 137, 887 }, { 138, 887 }, { 139, 887 }, { 140, 887 }, { 141, 887 },
 { 142, 887 }, { 143, 887 }, { 144, 887 }, { 145, 887 }, { 146, 887 },
 { 147, 887 }, { 148, 887 }, { 149, 887 }, { 150, 887 }, { 151, 887 },
 { 152, 887 }, { 153, 887 }, { 154, 887 }, { 155, 887 }, { 156, 887 },

 { 157, 887 }, { 158, 887 }, { 159, 887 }, { 160, 887 }, { 161, 887 },
 { 162, 887 }, { 163, 887 }, { 164, 887 }, { 165, 887 }, { 166, 887 },
 { 167, 887 }, { 168, 887 }, { 169, 887 }, { 170, 887 }, { 171, 887 },
 { 172, 887 }, { 173, 887 }, { 174, 887 }, { 175, 887 }, { 176, 887 },
 { 177, 887 }, { 178, 887 }, { 179, 887 }, { 180, 887 }, { 181, 887 },
 { 182, 887 }, { 183, 887 }, { 184, 887 }, { 185, 887 }, { 186, 887 },
 { 187, 887 }, { 188, 887 }, { 189, 887 }, { 190, 887 }, { 191, 887 },
 { 192, 887 }, { 193, 887 }, { 194, 887 }, { 195, 887 }, { 196, 887 },
 { 197, 887 }, { 198, 887 }, { 199, 887 }, { 200, 887 }, { 201, 887 },
 { 202, 887 }, { 203, 887 }, { 204, 887 }, { 205, 887 }, { 206, 887 },

 { 207, 887 }, { 208, 887 }, { 209, 887 }, { 210, 887 }, { 211, 887 },
 { 212, 887 }, { 213, 887 }, { 214, 887 }, { 215, 887 }, { 216, 887 },
 { 217, 887 }, { 218, 887 }, { 219, 887 }, { 220, 887 }, { 221, 887 },
 { 222, 887 }, { 223, 887 }, { 224, 887 }, { 225, 887 }, { 226, 887 },
 { 227, 887 }, { 228, 887 }, { 229, 887 }, { 230, 887 }, { 231, 887 },
 { 232, 887 }, { 233, 887 }, { 234, 887 }, { 235, 887 }, { 236, 887 },
 { 237, 887 }, { 238, 887 }, { 239, 887 }, { 240, 887 }, { 241, 887 },
 { 242, 887 }, { 243, 887 }, { 244, 887 }, { 245, 887 }, { 246, 887 },
 { 247, 887 }, { 248, 887 }, { 249, 887 }, { 250, 887 }, { 251, 887 },
 { 252, 887 }, { 253, 887 }, { 254, 887 }, { 255, 887 }, { 256, 887 },

 {   0,  60 }, {   0,5727 }, {   0,  58 }, {   0,5725 }, {   0,  59 },
 {   0,5723 }, {   0,  60 }, {   0,5721 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9,1406 }, {   0,   0 }, {   0,   0 },
 {  12,1406 }, {   0,   0 }, {   0,  56 }, {   0,5710 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,1406 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,1780 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,1852 },
 {  48,1803 }, {  49,1803 }, {  50,1803 }, {  51,1803 }, {  52,1803 },
 {  53,1803 }, {  54,1803 }, {  55,1803 }, {  56,1803 }, {  57,1803 },
 {   0,   0 }, {  48,1944 }, {  49,1944 }, {  50,1944 }, {  51,1944 },
 {  52,1944 }, {  53,1944 }, {  54,1944 }, {  55,1944 }, {  56,1944 },
 {  57,1944 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  73,1783 }, {   0,   0 }, {   0,   0 }, {  65,1944 }, {  66,1944 },
 {  67,1944 }, {  68,1944 }, {  69,1944 }, {  70,1944 }, {  71,1852 },
 {  72,1852 }, {  73,1852 }, {  74,1852 }, {  75,1852 }, {  76,1852 },
 {  77,1852 }, {  78,1852 }, {  79,1852 }, {  80,1852 }, {  81,1852 },

 {  82,1852 }, {  83,1852 }, {  84,1852 }, {  85,1852 }, {  86,1852 },
 {  87,1852 }, {  88,1852 }, {  89,1852 }, {  90,1852 }, {   0,  60 },
 {   0,5618 }, {   0,   0 }, { 105,1783 }, {  95,1852 }, {   0,   0 },
 {  97,1944 }, {  98,1944 }, {  99,1944 }, { 100,1944 }, { 101,1944 },
 { 102,1944 }, { 103,1852 }, { 104,1852 }, { 105,1852 }, { 106,1852 },
 { 107,1852 }, { 108,1852 }, { 109,1852 }, { 110,1852 }, { 111,1852 },
 { 112,1852 }, { 113,1852 }, { 114,1852 }, { 115,1852 }, { 116,1852 },
 { 117,1852 }, { 118,1852 }, { 119,1852 }, { 120,1852 }, { 121,1852 },
 { 122,1852 }, {   0,  28 }, {   0,5586 }, {   0,  17 }, {   0,5584 },
 {   0,  18 }, {   0,5582 }, {   0,  23 }, {   0,5580 }, {   0,  24 },

 {   0,5578 }, {   0,  39 }, {   0,5576 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,1688 }, {  49,1688 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  73,1690 }, {   0,   0 },
 {   0,   0 }, {  42,1730 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  46,1732 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  61,1660 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  61,1732 },
 {   0,   0 }, {  61,1732 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 105,1690 }, {   0,  60 }, {   0,5511 }, {   1,1869 }, {   2,1869 },
 {   3,1869 }, {   4,1869 }, {   5,1869 }, {   6,1869 }, {   7,1869 },
 {   8,1869 }, {   9,1869 }, {  10,1869 }, {  11,1869 }, {  12,1869 },
 {  13,1869 }, {  14,1869 }, {  15,1869 }, {  16,1869 }, {  17,1869 },
 {  18,1869 }, {  19,1869 }, {  20,1869 }, {  21,1869 }, {  22,1869 },
 {  23,1869 }, {  24,1869 }, {  25,1869 }, {  26,1869 }, {  27,1869 },
 {  28,1869 }, {  29,1869 }, {  30,1869 }, {  31,1869 }, {  32,1869 },

 {  33,1869 }, {  34,1869 }, {  35,1869 }, {  36,1869 }, {  37,1869 },
 {  38,1869 }, {  39,1655 }, {  40,1869 }, {  41,1869 }, {  42,1869 },
 {  43,1869 }, {  44,1869 }, {  45,1869 }, {  46,1869 }, {  47,1869 },
 {  48,1869 }, {  49,1869 }, {  50,1869 }, {  51,1869 }, {  52,1869 },
 {  53,1869 }, {  54,1869 }, {  55,1869 }, {  56,1869 }, {  57,1869 },
 {  58,1869 }, {  59,1869 }, {  60,1869 }, {  61,1869 }, {  62,1869 },
 {  63,1869 }, {  64,1869 }, {  65,1869 }, {  66,1869 }, {  67,1869 },
 {  68,1869 }, {  69,1869 }, {  70,1869 }, {  71,1869 }, {  72,1869 },
 {  73,1869 }, {  74,1869 }, {  75,1869 }, {  76,1869 }, {  77,1869 },
 {  78,1869 }, {  79,1869 }, {  80,1869 }, {  81,1869 }, {  82,1869 },

 {  83,1869 }, {  84,1869 }, {  85,1869 }, {  86,1869 }, {  87,1869 },
 {  88,1869 }, {  89,1869 }, {  90,1869 }, {  91,1869 }, {  92,1869 },
 {  93,1869 }, {  94,1869 }, {  95,1869 }, {  96,1869 }, {  97,1869 },
 {  98,1869 }, {  99,1869 }, { 100,1869 }, { 101,1869 }, { 102,1869 },
 { 103,1869 }, { 104,1869 }, { 105,1869 }, { 106,1869 }, { 107,1869 },
 { 108,1869 }, { 109,1869 }, { 110,1869 }, { 111,1869 }, { 112,1869 },
 { 113,1869 }, { 114,1869 }, { 115,1869 }, { 116,1869 }, { 117,1869 },
 { 118,1869 }, { 119,1869 }, { 120,1869 }, { 121,1869 }, { 122,1869 },
 { 123,1869 }, { 124,1869 }, { 125,1869 }, { 126,1869 }, { 127,1869 },
 { 128,1869 }, { 129,1869 }, { 130,1869 }, { 131,1869 }, { 132,1869 },

 { 133,1869 }, { 134,1869 }, { 135,1869 }, { 136,1869 }, { 137,1869 },
 { 138,1869 }, { 139,1869 }, { 140,1869 }, { 141,1869 }, { 142,1869 },
 { 143,1869 }, { 144,1869 }, { 145,1869 }, { 146,1869 }, { 147,1869 },
 { 148,1869 }, { 149,1869 }, { 150,1869 }, { 151,1869 }, { 152,1869 },
 { 153,1869 }, { 154,1869 }, { 155,1869 }, { 156,1869 }, { 157,1869 },
 { 158,1869 }, { 159,1869 }, { 160,1869 }, { 161,1869 }, { 162,1869 },
 { 163,1869 }, { 164,1869 }, { 165,1869 }, { 166,1869 }, { 167,1869 },
 { 168,1869 }, { 169,1869 }, { 170,1869 }, { 171,1869 }, { 172,1869 },
 { 173,1869 }, { 174,1869 }, { 175,1869 }, { 176,1869 }, { 177,1869 },
 { 178,1869 }, { 179,1869 }, { 180,1869 }, { 181,1869 }, { 182,1869 },

 { 183,1869 }, { 184,1869 }, { 185,1869 }, { 186,1869 }, { 187,1869 },
 { 188,1869 }, { 189,1869 }, { 190,1869 }, { 191,1869 }, { 192,1869 },
 { 193,1869 }, { 194,1869 }, { 195,1869 }, { 196,1869 }, { 197,1869 },
 { 198,1869 }, { 199,1869 }, { 200,1869 }, { 201,1869 }, { 202,1869 },
 { 203,1869 }, { 204,1869 }, { 205,1869 }, { 206,1869 }, { 207,1869 },
 { 208,1869 }, { 209,1869 }, { 210,1869 }, { 211,1869 }, { 212,1869 },
 { 213,1869 }, { 214,1869 }, { 215,1869 }, { 216,1869 }, { 217,1869 },
 { 218,1869 }, { 219,1869 }, { 220,1869 }, { 221,1869 }, { 222,1869 },
 { 223,1869 }, { 224,1869 }, { 225,1869 }, { 226,1869 }, { 227,1869 },
 { 228,1869 }, { 229,1869 }, { 230,1869 }, { 231,1869 }, { 232,1869 },

 { 233,1869 }, { 234,1869 }, { 235,1869 }, { 236,1869 }, { 237,1869 },
 { 238,1869 }, { 239,1869 }, { 240,1869 }, { 241,1869 }, { 242,1869 },
 { 243,1869 }, { 244,1869 }, { 245,1869 }, { 246,1869 }, { 247,1869 },
 { 248,1869 }, { 249,1869 }, { 250,1869 }, { 251,1869 }, { 252,1869 },
 { 253,1869 }, { 254,1869 }, { 255,1869 }, { 256,1869 }, {   0,  25 },
 {   0,5253 }, {   0,  40 }, {   0,5251 }, {   0,  42 }, {   0,5249 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  55 }, {   0,5235 }, {   0,  46 },
 {   0,5233 }, {   0,  47 }, {   0,5231 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,  50 }, {   0,5222 }, {   0,  52 }, {   0,5220 }, {   0,  51 },
 {   0,5218 }, {   0,  43 }, {   0,5216 }, {   0,  21 }, {   0,5214 },
 {   0,  22 }, {   0,5212 }, {   0,   0 }, {  41,1416 }, {   0,  44 },
 {   0,5208 }, {   0,   0 }, {   0,   0 }, {  46,1418 }, {   0,   0 },
 {   0,   0 }, {  47,1418 }, {   0,   0 }, {  35,1851 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  16 }, {   0,5195 }, {   0,  29 },
 {   0,5193 }, {  61,1416 }, {   0,  38 }, {   0,5190 }, {  46,1874 },
 {  61,1420 }, {  48,1910 }, {  49,1910 }, {  50,1969 }, {  51,1969 },
 {  52,1969 }, {  53,1969 }, {  54,1969 }, {  55,1969 }, {  56,1969 },

 {  57,1969 }, {   0,  55 }, {   0,5176 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  61,1409 }, {   0,   0 }, {  65,2028 }, {  66,2087 },
 {  67,2028 }, {  68,2028 }, {  69,2147 }, {  70,2028 }, {   0,   0 },
 {  72,1409 }, {  60,1426 }, {  61,1428 }, {  62,1458 }, {  36,1825 },
 {   0,   0 }, {  61,1485 }, {  62,1487 }, {   0,   0 }, {   0,   0 },
 {  42,1827 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  88,2172 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  35,1792 }, {  95,2206 }, {   0,   0 },
 {  97,2028 }, {  98,2087 }, {  99,2028 }, { 100,2028 }, { 101,2147 },
 { 102,2028 }, {  61,1827 }, { 104,1409 }, {  46,1815 }, {   0,   0 },

 {  48,1851 }, {  49,1851 }, {  50,1910 }, {  51,1910 }, {  52,1910 },
 {  53,1910 }, {  54,1910 }, {  55,1910 }, {  56,1910 }, {  57,1910 },
 {   0,  55 }, {   0,5117 }, {   0,   0 }, { 120,2172 }, {   0,   0 },
 {   0,   9 }, {   0,5112 }, {  65,1969 }, {  66,2028 }, {  67,1969 },
 {  68,1969 }, {  69,2088 }, {  70,1969 }, {   0,   0 }, {  72,1350 },
 {   9,1756 }, {  10,1756 }, {   0,  11 }, {   0,5100 }, {   0,   8 },
 {   0,5098 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  35,1733 }, {  95,2147 }, {  32,1756 }, {  97,1969 },

 {  98,2028 }, {  99,1969 }, { 100,1969 }, { 101,2088 }, { 102,1969 },
 {   0,   0 }, { 104,1350 }, {  46,1756 }, {   0,   0 }, {  48,1851 },
 {  49,1851 }, {  50,1851 }, {  51,1851 }, {  52,1851 }, {  53,1851 },
 {  54,1851 }, {  55,1851 }, {  56,1851 }, {  57,1851 }, {   0,   0 },
 {   0,  56 }, {   0,5057 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,1910 }, {  66,1910 }, {  67,1910 }, {  68,1910 },
 {  69,2029 }, {  70,1910 }, {   0,   0 }, {  72,1291 }, {   0,   4 },
 {   0,5043 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,2076 },
 {  10,2076 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,2088 }, {  36,1199 }, {  97,1910 }, {  98,1910 },
 {  99,1910 }, { 100,1910 }, { 101,2029 }, { 102,1910 }, {   0,   0 },
 { 104,1291 }, {   0,   0 }, {  32,2076 }, {   0,   0 }, {  48,1199 },
 {  49,1199 }, {  50,1199 }, {  51,1199 }, {  52,1199 }, {  53,1199 },
 {  54,1199 }, {  55,1199 }, {  56,1199 }, {  57,1199 }, {  44,2076 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,1199 }, {  66,1199 }, {  67,1199 }, {  68,1199 },
 {  69,1199 }, {  70,1199 }, {  71,1199 }, {  72,1199 }, {  73,1199 },
 {  74,1199 }, {  75,1199 }, {  76,1199 }, {  77,1199 }, {  78,1199 },

 {  79,1199 }, {  80,1199 }, {  81,1199 }, {  82,1199 }, {  83,1199 },
 {  84,1199 }, {  85,1199 }, {  86,1199 }, {  87,1199 }, {  88,1199 },
 {  89,1199 }, {  90,1199 }, {   0,  56 }, {   0,4965 }, {   0,   0 },
 {   0,   0 }, {  95,1199 }, {   0,   0 }, {  97,1199 }, {  98,1199 },
 {  99,1199 }, { 100,1199 }, { 101,1199 }, { 102,1199 }, { 103,1199 },
 { 104,1199 }, { 105,1199 }, { 106,1199 }, { 107,1199 }, { 108,1199 },
 { 109,1199 }, { 110,1199 }, { 111,1199 }, { 112,1199 }, { 113,1199 },
 { 114,1199 }, { 115,1199 }, { 116,1199 }, { 117,1199 }, { 118,1199 },
 { 119,1199 }, { 120,1199 }, { 121,1199 }, { 122,1199 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,1107 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,1107 }, {  49,1107 }, {  50,1107 }, {  51,1107 },
 {  52,1107 }, {  53,1107 }, {  54,1107 }, {  55,1107 }, {  56,1107 },
 {  57,1107 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,1107 }, {  66,1107 },
 {  67,1107 }, {  68,1107 }, {  69,1107 }, {  70,1107 }, {  71,1107 },
 {  72,1107 }, {  73,1107 }, {  74,1107 }, {  75,1107 }, {  76,1107 },
 {  77,1107 }, {  78,1107 }, {  79,1107 }, {  80,1107 }, {  81,1107 },
 {  82,1107 }, {  83,1996 }, {  84,1107 }, {  85,1107 }, {  86,1107 },

 {  87,1107 }, {  88,1107 }, {  89,1107 }, {  90,1107 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,1107 }, {   0,   0 },
 {  97,1107 }, {  98,1107 }, {  99,1107 }, { 100,1107 }, { 101,1107 },
 { 102,1107 }, { 103,1107 }, { 104,1107 }, { 105,1107 }, { 106,1107 },
 { 107,1107 }, { 108,1107 }, { 109,1107 }, { 110,1107 }, { 111,1107 },
 { 112,1107 }, { 113,1107 }, { 114,1107 }, { 115,1996 }, { 116,1107 },
 { 117,1107 }, { 118,1107 }, { 119,1107 }, { 120,1107 }, { 121,1107 },
 { 122,1107 }, {   0,  10 }, {   0,4841 }, {   1,1996 }, {   2,1996 },
 {   3,1996 }, {   4,1996 }, {   5,1996 }, {   6,1996 }, {   7,1996 },
 {   8,1996 }, {   9,1996 }, {   0,   0 }, {  11,1996 }, {  12,1996 },

 {  13,1996 }, {  14,1996 }, {  15,1996 }, {  16,1996 }, {  17,1996 },
 {  18,1996 }, {  19,1996 }, {  20,1996 }, {  21,1996 }, {  22,1996 },
 {  23,1996 }, {  24,1996 }, {  25,1996 }, {  26,1996 }, {  27,1996 },
 {  28,1996 }, {  29,1996 }, {  30,1996 }, {  31,1996 }, {  32,1996 },
 {  33,1996 }, {  34,1996 }, {  35,1996 }, {  36,1996 }, {  37,1996 },
 {  38,1996 }, {  39,1996 }, {  40,1996 }, {  41,1996 }, {  42,1996 },
 {  43,1996 }, {  44,1996 }, {  45,1996 }, {  46,1996 }, {  47,1996 },
 {  48,1996 }, {  49,1996 }, {  50,1996 }, {  51,1996 }, {  52,1996 },
 {  53,1996 }, {  54,1996 }, {  55,1996 }, {  56,1996 }, {  57,1996 },
 {  58,1996 }, {  59,1482 }, {  60,1996 }, {  61,1996 }, {  62,1996 },

 {  63,1996 }, {  64,1996 }, {  65,1996 }, {  66,1996 }, {  67,1996 },
 {  68,1996 }, {  69,1996 }, {  70,1996 }, {  71,1996 }, {  72,1996 },
 {  73,1996 }, {  74,1996 }, {  75,1996 }, {  76,1996 }, {  77,1996 },
 {  78,1996 }, {  79,1996 }, {  80,1996 }, {  81,1996 }, {  82,1996 },
 {  83,1996 }, {  84,1996 }, {  85,1996 }, {  86,1996 }, {  87,1996 },
 {  88,1996 }, {  89,1996 }, {  90,1996 }, {  91,1996 }, {  92,1996 },
 {  93,1996 }, {  94,1996 }, {  95,1996 }, {  96,1996 }, {  97,1996 },
 {  98,1996 }, {  99,1996 }, { 100,1996 }, { 101,1996 }, { 102,1996 },
 { 103,1996 }, { 104,1996 }, { 105,1996 }, { 106,1996 }, { 107,1996 },
 { 108,1996 }, { 109,1996 }, { 110,1996 }, { 111,1996 }, { 112,1996 },

 { 113,1996 }, { 114,1996 }, { 115,1996 }, { 116,1996 }, { 117,1996 },
 { 118,1996 }, { 119,1996 }, { 120,1996 }, { 121,1996 }, { 122,1996 },
 { 123,1996 }, { 124,1996 }, { 125,1996 }, { 126,1996 }, { 127,1996 },
 { 128,1996 }, { 129,1996 }, { 130,1996 }, { 131,1996 }, { 132,1996 },
 { 133,1996 }, { 134,1996 }, { 135,1996 }, { 136,1996 }, { 137,1996 },
 { 138,1996 }, { 139,1996 }, { 140,1996 }, { 141,1996 }, { 142,1996 },
 { 143,1996 }, { 144,1996 }, { 145,1996 }, { 146,1996 }, { 147,1996 },
 { 148,1996 }, { 149,1996 }, { 150,1996 }, { 151,1996 }, { 152,1996 },
 { 153,1996 }, { 154,1996 }, { 155,1996 }, { 156,1996 }, { 157,1996 },
 { 158,1996 }, { 159,1996 }, { 160,1996 }, { 161,1996 }, { 162,1996 },

 { 163,1996 }, { 164,1996 }, { 165,1996 }, { 166,1996 }, { 167,1996 },
 { 168,1996 }, { 169,1996 }, { 170,1996 }, { 171,1996 }, { 172,1996 },
 { 173,1996 }, { 174,1996 }, { 175,1996 }, { 176,1996 }, { 177,1996 },
 { 178,1996 }, { 179,1996 }, { 180,1996 }, { 181,1996 }, { 182,1996 },
 { 183,1996 }, { 184,1996 }, { 185,1996 }, { 186,1996 }, { 187,1996 },
 { 188,1996 }, { 189,1996 }, { 190,1996 }, { 191,1996 }, { 192,1996 },
 { 193,1996 }, { 194,1996 }, { 195,1996 }, { 196,1996 }, { 197,1996 },
 { 198,1996 }, { 199,1996 }, { 200,1996 }, { 201,1996 }, { 202,1996 },
 { 203,1996 }, { 204,1996 }, { 205,1996 }, { 206,1996 }, { 207,1996 },
 { 208,1996 }, { 209,1996 }, { 210,1996 }, { 211,1996 }, { 212,1996 },

 { 213,1996 }, { 214,1996 }, { 215,1996 }, { 216,1996 }, { 217,1996 },
 { 218,1996 }, { 219,1996 }, { 220,1996 }, { 221,1996 }, { 222,1996 },
 { 223,1996 }, { 224,1996 }, { 225,1996 }, { 226,1996 }, { 227,1996 },
 { 228,1996 }, { 229,1996 }, { 230,1996 }, { 231,1996 }, { 232,1996 },
 { 233,1996 }, { 234,1996 }, { 235,1996 }, { 236,1996 }, { 237,1996 },
 { 238,1996 }, { 239,1996 }, { 240,1996 }, { 241,1996 }, { 242,1996 },
 { 243,1996 }, { 244,1996 }, { 245,1996 }, { 246,1996 }, { 247,1996 },
 { 248,1996 }, { 249,1996 }, { 250,1996 }, { 251,1996 }, { 252,1996 },
 { 253,1996 }, { 254,1996 }, { 255,1996 }, { 256,1996 }, {   0,   9 },
 {   0,4583 }, {   1,1738 }, {   2,1738 }, {   3,1738 }, {   4,1738 },

 {   5,1738 }, {   6,1738 }, {   7,1738 }, {   8,1738 }, {   9,1996 },
 {  10,1227 }, {  11,1738 }, {  12,1738 }, {  13,1738 }, {  14,1738 },
 {  15,1738 }, {  16,1738 }, {  17,1738 }, {  18,1738 }, {  19,1738 },
 {  20,1738 }, {  21,1738 }, {  22,1738 }, {  23,1738 }, {  24,1738 },
 {  25,1738 }, {  26,1738 }, {  27,1738 }, {  28,1738 }, {  29,1738 },
 {  30,1738 }, {  31,1738 }, {  32,1996 }, {  33,1738 }, {  34,1738 },
 {  35,1738 }, {  36,1738 }, {  37,1738 }, {  38,1738 }, {  39,1738 },
 {  40,1738 }, {  41,1738 }, {  42,1738 }, {  43,1738 }, {  44,1738 },
 {  45,1738 }, {  46,1738 }, {  47,1738 }, {  48,1738 }, {  49,1738 },
 {  50,1738 }, {  51,1738 }, {  52,1738 }, {  53,1738 }, {  54,1738 },

 {  55,1738 }, {  56,1738 }, {  57,1738 }, {  58,1738 }, {  59,1224 },
 {  60,1738 }, {  61,1738 }, {  62,1738 }, {  63,1738 }, {  64,1738 },
 {  65,1738 }, {  66,1738 }, {  67,1738 }, {  68,1738 }, {  69,1738 },
 {  70,1738 }, {  71,1738 }, {  72,1738 }, {  73,1738 }, {  74,1738 },
 {  75,1738 }, {  76,1738 }, {  77,1738 }, {  78,1738 }, {  79,1738 },
 {  80,1738 }, {  81,1738 }, {  82,1738 }, {  83,1738 }, {  84,1738 },
 {  85,1738 }, {  86,1738 }, {  87,1738 }, {  88,1738 }, {  89,1738 },
 {  90,1738 }, {  91,1738 }, {  92,1738 }, {  93,1738 }, {  94,1738 },
 {  95,1738 }, {  96,1738 }, {  97,1738 }, {  98,1738 }, {  99,1738 },
 { 100,1738 }, { 101,1738 }, { 102,1738 }, { 103,1738 }, { 104,1738 },

 { 105,1738 }, { 106,1738 }, { 107,1738 }, { 108,1738 }, { 109,1738 },
 { 110,1738 }, { 111,1738 }, { 112,1738 }, { 113,1738 }, { 114,1738 },
 { 115,1738 }, { 116,1738 }, { 117,1738 }, { 118,1738 }, { 119,1738 },
 { 120,1738 }, { 121,1738 }, { 122,1738 }, { 123,1738 }, { 124,1738 },
 { 125,1738 }, { 126,1738 }, { 127,1738 }, { 128,1738 }, { 129,1738 },
 { 130,1738 }, { 131,1738 }, { 132,1738 }, { 133,1738 }, { 134,1738 },
 { 135,1738 }, { 136,1738 }, { 137,1738 }, { 138,1738 }, { 139,1738 },
 { 140,1738 }, { 141,1738 }, { 142,1738 }, { 143,1738 }, { 144,1738 },
 { 145,1738 }, { 146,1738 }, { 147,1738 }, { 148,1738 }, { 149,1738 },
 { 150,1738 }, { 151,1738 }, { 152,1738 }, { 153,1738 }, { 154,1738 },

 { 155,1738 }, { 156,1738 }, { 157,1738 }, { 158,1738 }, { 159,1738 },
 { 160,1738 }, { 161,1738 }, { 162,1738 }, { 163,1738 }, { 164,1738 },
 { 165,1738 }, { 166,1738 }, { 167,1738 }, { 168,1738 }, { 169,1738 },
 { 170,1738 }, { 171,1738 }, { 172,1738 }, { 173,1738 }, { 174,1738 },
 { 175,1738 }, { 176,1738 }, { 177,1738 }, { 178,1738 }, { 179,1738 },
 { 180,1738 }, { 181,1738 }, { 182,1738 }, { 183,1738 }, { 184,1738 },
 { 185,1738 }, { 186,1738 }, { 187,1738 }, { 188,1738 }, { 189,1738 },
 { 190,1738 }, { 191,1738 }, { 192,1738 }, { 193,1738 }, { 194,1738 },
 { 195,1738 }, { 196,1738 }, { 197,1738 }, { 198,1738 }, { 199,1738 },
 { 200,1738 }, { 201,1738 }, { 202,1738 }, { 203,1738 }, { 204,1738 },

 { 205,1738 }, { 206,1738 }, { 207,1738 }, { 208,1738 }, { 209,1738 },
 { 210,1738 }, { 211,1738 }, { 212,1738 }, { 213,1738 }, { 214,1738 },
 { 215,1738 }, { 216,1738 }, { 217,1738 }, { 218,1738 }, { 219,1738 },
 { 220,1738 }, { 221,1738 }, { 222,1738 }, { 223,1738 }, { 224,1738 },
 { 225,1738 }, { 226,1738 }, { 227,1738 }, { 228,1738 }, { 229,1738 },
 { 230,1738 }, { 231,1738 }, { 232,1738 }, { 233,1738 }, { 234,1738 },
 { 235,1738 }, { 236,1738 }, { 237,1738 }, { 238,1738 }, { 239,1738 },
 { 240,1738 }, { 241,1738 }, { 242,1738 }, { 243,1738 }, { 244,1738 },
 { 245,1738 }, { 246,1738 }, { 247,1738 }, { 248,1738 }, { 249,1738 },
 { 250,1738 }, { 251,1738 }, { 252,1738 }, { 253,1738 }, { 254,1738 },

 { 255,1738 }, { 256,1738 }, {   0,   4 }, {   0,4325 }, {   0,   6 },
 {   0,4323 }, {   0,   7 }, {   0,4321 }, {   0,  58 }, {   0,4319 },
 {   0,   0 }, {   0,   0 }, {   9,1358 }, {  10,1358 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {   0,   0 },
 {   0,   0 }, {  12,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,1358 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  44,1358 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  46,1994 }, {   0,   0 }, {  48,1994 }, {  49,1994 },
 {  50,1994 }, {  51,1994 }, {  52,1994 }, {  53,1994 }, {  54,1994 },
 {  55,1994 }, {  56,1994 }, {  57,1994 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,1994 }, {  66,1994 }, {  67,1994 }, {  68,1994 }, {  69,1994 },
 {  70,1994 }, {  71,1994 }, {  72,1994 }, {  73,1994 }, {  74,1994 },
 {  75,1994 }, {  76,1994 }, {  77,1994 }, {  78,1994 }, {  79,1994 },
 {  80,1994 }, {  81,1994 }, {  82,1994 }, {  83,1994 }, {  84,1994 },
 {  85,1994 }, {  86,1994 }, {  87,1994 }, {  88,1994 }, {  89,1994 },
 {  90,1994 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  95,1994 }, {   0,   0 }, {  97,1994 }, {  98,1994 }, {  99,1994 },
 { 100,1994 }, { 101,1994 }, { 102,1994 }, { 103,1994 }, { 104,1994 },
 { 105,1994 }, { 106,1994 }, { 107,1994 }, { 108,1994 }, { 109,1994 },
 { 110,1994 }, { 111,1994 }, { 112,1994 }, { 113,1994 }, { 114,1994 },
 { 115,1994 }, { 116,1994 }, { 117,1994 }, { 118,1994 }, { 119,1994 },
 { 120,1994 }, { 121,1994 }, { 122,1994 }, {   0,   8 }, {   0,4199 },
 {   1,1994 }, {   2,1994 }, {   3,1994 }, {   4,1994 }, {   5,1994 },
 {   6,1994 }, {   7,1994 }, {   8,1994 }, {   9,1994 }, {  10,1994 },
 {  11,1994 }, {  12,1994 }, {  13,1994 }, {  14,1994 }, {  15,1994 },
 {  16,1994 }, {  17,1994 }, {  18,1994 }, {  19,1994 }, {  20,1994 },

 {  21,1994 }, {  22,1994 }, {  23,1994 }, {  24,1994 }, {  25,1994 },
 {  26,1994 }, {  27,1994 }, {  28,1994 }, {  29,1994 }, {  30,1994 },
 {  31,1994 }, {  32,1994 }, {  33,1994 }, {  34,1994 }, {  35,1994 },
 {  36,1994 }, {  37,1994 }, {  38,1994 }, {  39,1994 }, {  40,1994 },
 {  41,1994 }, {  42,1994 }, {  43,1994 }, {  44,1994 }, {  45,1994 },
 {  46,1994 }, {  47,1994 }, {  48,1994 }, {  49,1994 }, {  50,1994 },
 {  51,1994 }, {  52,1994 }, {  53,1994 }, {  54,1994 }, {  55,1994 },
 {  56,1994 }, {  57,1994 }, {  58,1994 }, {  59,1994 }, {  60,1994 },
 {  61,1994 }, {  62,1994 }, {  63,1994 }, {  64,1994 }, {  65,1994 },
 {  66,1994 }, {  67,1994 }, {  68,1994 }, {  69,1994 }, {  70,1994 },

 {  71,1994 }, {  72,1994 }, {  73,1994 }, {  74,1994 }, {  75,1994 },
 {  76,1994 }, {  77,1994 }, {  78,1994 }, {  79,1994 }, {  80,1994 },
 {  81,1994 }, {  82,1994 }, {  83,1994 }, {  84,1994 }, {  85,1994 },
 {  86,1994 }, {  87,1994 }, {  88,1994 }, {  89,1994 }, {  90,1994 },
 {  91,1994 }, {  92,1994 }, {  93,1994 }, {  94,1994 }, {  95,1994 },
 {  96,1994 }, {  97,1994 }, {  98,1994 }, {  99,1994 }, { 100,1994 },
 { 101,1994 }, { 102,1994 }, { 103,1994 }, { 104,1994 }, { 105,1994 },
 { 106,1994 }, { 107,1994 }, { 108,1994 }, { 109,1994 }, { 110,1994 },
 { 111,1994 }, { 112,1994 }, { 113,1994 }, { 114,1994 }, { 115,1994 },
 { 116,1994 }, { 117,1994 }, { 118,1994 }, { 119,1994 }, { 120,1994 },

 { 121,1994 }, { 122,1994 }, { 123,1994 }, { 124,1994 }, { 125,1240 },
 { 126,1994 }, { 127,1994 }, { 128,1994 }, { 129,1994 }, { 130,1994 },
 { 131,1994 }, { 132,1994 }, { 133,1994 }, { 134,1994 }, { 135,1994 },
 { 136,1994 }, { 137,1994 }, { 138,1994 }, { 139,1994 }, { 140,1994 },
 { 141,1994 }, { 142,1994 }, { 143,1994 }, { 144,1994 }, { 145,1994 },
 { 146,1994 }, { 147,1994 }, { 148,1994 }, { 149,1994 }, { 150,1994 },
 { 151,1994 }, { 152,1994 }, { 153,1994 }, { 154,1994 }, { 155,1994 },
 { 156,1994 }, { 157,1994 }, { 158,1994 }, { 159,1994 }, { 160,1994 },
 { 161,1994 }, { 162,1994 }, { 163,1994 }, { 164,1994 }, { 165,1994 },
 { 166,1994 }, { 167,1994 }, { 168,1994 }, { 169,1994 }, { 170,1994 },

 { 171,1994 }, { 172,1994 }, { 173,1994 }, { 174,1994 }, { 175,1994 },
 { 176,1994 }, { 177,1994 }, { 178,1994 }, { 179,1994 }, { 180,1994 },
 { 181,1994 }, { 182,1994 }, { 183,1994 }, { 184,1994 }, { 185,1994 },
 { 186,1994 }, { 187,1994 }, { 188,1994 }, { 189,1994 }, { 190,1994 },
 { 191,1994 }, { 192,1994 }, { 193,1994 }, { 194,1994 }, { 195,1994 },
 { 196,1994 }, { 197,1994 }, { 198,1994 }, { 199,1994 }, { 200,1994 },
 { 201,1994 }, { 202,1994 }, { 203,1994 }, { 204,1994 }, { 205,1994 },
 { 206,1994 }, { 207,1994 }, { 208,1994 }, { 209,1994 }, { 210,1994 },
 { 211,1994 }, { 212,1994 }, { 213,1994 }, { 214,1994 }, { 215,1994 },
 { 216,1994 }, { 217,1994 }, { 218,1994 }, { 219,1994 }, { 220,1994 },

 { 221,1994 }, { 222,1994 }, { 223,1994 }, { 224,1994 }, { 225,1994 },
 { 226,1994 }, { 227,1994 }, { 228,1994 }, { 229,1994 }, { 230,1994 },
 { 231,1994 }, { 232,1994 }, { 233,1994 }, { 234,1994 }, { 235,1994 },
 { 236,1994 }, { 237,1994 }, { 238,1994 }, { 239,1994 }, { 240,1994 },
 { 241,1994 }, { 242,1994 }, { 243,1994 }, { 244,1994 }, { 245,1994 },
 { 246,1994 }, { 247,1994 }, { 248,1994 }, { 249,1994 }, { 250,1994 },
 { 251,1994 }, { 252,1994 }, { 253,1994 }, { 254,1994 }, { 255,1994 },
 { 256,1994 }, {   0,   0 }, {   0,3941 }, {   0,   0 }, {   0,   0 },
 {   0,3938 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  55 }, {   0,3930 }, {   0,   0 },

 {   0,3928 }, {   0,  35 }, {   0,3926 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  57 },
 {   0,3918 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,1994 }, {  49,1994 }, {  50,1994 }, {  51,1994 }, {  52,1994 },
 {  53,1994 }, {  54,1994 }, {  55,1994 }, {  56,1994 }, {  57,1994 },
 {  35,1994 }, {  48,   0 }, {  49,   0 }, {   0,   0 }, {  39,2075 },

 {   0,   0 }, {   0,   0 }, {  65,1994 }, {  66,1994 }, {  67,1994 },
 {  68,1994 }, {  69,1994 }, {  70,1994 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  78,2353 }, {   0,  56 },
 {   0,3858 }, {   0,  57 }, {   0,3856 }, {   0,  14 }, {   0,3854 },
 {   0,  19 }, {   0,3852 }, {   0,   0 }, {  78,2370 }, {   0,  30 },
 {   0,3848 }, {   0,  31 }, {   0,3846 }, {   0,   0 }, {  97,1994 },
 {  98,1994 }, {  99,1994 }, { 100,1994 }, { 101,1994 }, { 102,1994 },
 {   0,  32 }, {   0,3837 }, {   0,  20 }, {   0,3835 }, {   0,  41 },
 {   0,3833 }, {   0,  13 }, {   0,3831 }, {   0,  37 }, {   0,3829 },

 { 110,2353 }, {   0,  55 }, {   0,3826 }, {   0,  45 }, {   0,3824 },
 {   0,   0 }, {  36,   0 }, {  35,1932 }, {   0,   0 }, {   0,   0 },
 { 110,2370 }, {  39,2399 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  27 }, {   0,3796 }, {   0,  48 }, {   0,3794 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },

 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {   0,  55 }, {   0,3766 }, {   0,  53 }, {   0,3764 },
 {  95,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, {  61,2240 }, {   0,  49 },
 {   0,3733 }, {   0,  26 }, {   0,3731 }, {  36, -92 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,2184 }, {  49,2184 }, {  50,2184 }, {  51,2184 }, {  52,2184 },
 {  53,2184 }, {  54,2184 }, {  55,2184 }, {  56,2184 }, {  57,2184 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,2184 }, {  66,2184 }, {  67,2184 },
 {  68,2184 }, {  69,2184 }, {  70,2184 }, {  71, -92 }, {  72, -92 },
 {  73, -92 }, {  74, -92 }, {  75, -92 }, {  76, -92 }, {  77, -92 },
 {  78, -92 }, {  79, -92 }, {  80, -92 }, {  81, -92 }, {  82, -92 },
 {  83, -92 }, {  84, -92 }, {  85, -92 }, {  86, -92 }, {  87, -92 },

 {  88, -92 }, {  89, -92 }, {  90, -92 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,2184 }, {  61,2177 }, {  97,2184 },
 {  98,2184 }, {  99,2184 }, { 100,2184 }, { 101,2184 }, { 102,2184 },
 { 103, -92 }, { 104, -92 }, { 105, -92 }, { 106, -92 }, { 107, -92 },
 { 108, -92 }, { 109, -92 }, { 110, -92 }, { 111, -92 }, { 112, -92 },
 { 113, -92 }, { 114, -92 }, { 115, -92 }, { 116, -92 }, { 117, -92 },
 { 118, -92 }, { 119, -92 }, { 120, -92 }, { 121, -92 }, { 122, -92 },
 {   0,   0 }, {   0,3642 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },

 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,-214 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },
 {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 },

 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },

 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 { 129,   0 }, { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 },
 { 134,   0 }, { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 },
 { 139,   0 }, { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 },
 { 144,   0 }, { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 },
 { 149,   0 }, { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 },
 { 154,   0 }, { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 },
 { 159,   0 }, { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 },

 { 164,   0 }, { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 },
 { 169,   0 }, { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 },
 { 174,   0 }, { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 },
 { 179,   0 }, { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 },
 { 184,   0 }, { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 },
 { 189,   0 }, { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 },
 { 194,   0 }, { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 },
 { 199,   0 }, { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 },
 { 204,   0 }, { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 },
 { 209,   0 }, { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 },

 { 214,   0 }, { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 },
 { 219,   0 }, { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 },
 { 224,   0 }, { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 },
 { 229,   0 }, { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 },
 { 234,   0 }, { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 },
 { 239,   0 }, { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 },
 { 244,   0 }, { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 },
 { 249,   0 }, { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 },
 { 254,   0 }, { 255,   0 }, { 256,   0 }, {   0,   0 }, {   0,3384 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,3370 }, {   0,  15 },
 {   0,3368 }, {   0,  36 }, {   0,3366 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,3361 }, {   0,  10 }, {   0,3359 },
 {   0,   0 }, {   0,   9 }, {   0,3356 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9,   0 }, {  10,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,2185 }, {  49,2185 }, {  50,2185 },
 {  51,2185 }, {  52,2185 }, {  53,2185 }, {  54,2185 }, {  55,2185 },

 {  56,2185 }, {  57,2185 }, {   0,  55 }, {   0,3325 }, {  32,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,2185 },
 {  66,2185 }, {  67,2185 }, {  68,2185 }, {  69,2185 }, {  70,2185 },
 {  48,2185 }, {  49,2185 }, {  50,2185 }, {  51,2185 }, {  52,2185 },
 {  53,2185 }, {  54,2185 }, {  55,2185 }, {  56,2185 }, {  57,2185 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  59,   0 }, {   0,   0 },
 {   0,   0 }, {  73,2557 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  35, -59 }, {   0,   0 },
 {   0,   0 }, {  97,2185 }, {  98,2185 }, {  99,2185 }, { 100,2185 },
 { 101,2185 }, { 102,2185 }, {   0,   0 }, {   0,   0 }, {  46, -36 },

 {   0,   0 }, {  48,2186 }, {  49,2186 }, {  50,2245 }, {  51,2245 },
 {  52,2245 }, {  53,2245 }, {  54,2245 }, {  55,2245 }, {  56,2245 },
 {  57,2245 }, {   0,  55 }, {   0,3266 }, { 105,2557 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65, 118 }, {  66, 177 },
 {  67, 118 }, {  68, 118 }, {  69, 237 }, {  70, 118 }, {   0,   0 },
 {  72,-501 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  35,-118 }, {  95, 296 }, {   0,   0 },

 {  97, 118 }, {  98, 177 }, {  99, 118 }, { 100, 118 }, { 101, 237 },
 { 102, 118 }, {   0,   0 }, { 104,-501 }, {  46, -95 }, {   0,   0 },
 {  48,2186 }, {  49,2186 }, {  50,2186 }, {  51,2186 }, {  52,2186 },
 {  53,2186 }, {  54,2186 }, {  55,2186 }, {  56,2186 }, {  57,2186 },
 {   0,   0 }, {   0,3207 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,  59 }, {  66,  59 }, {  67,  59 },
 {  68,  59 }, {  69, 178 }, {  70,  59 }, {   0,   0 }, {  72,-560 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95, 237 }, {   0,   0 }, {  97,  59 },
 {  98,  59 }, {  99,  59 }, { 100,  59 }, { 101, 178 }, { 102,  59 },
 {   0,   0 }, { 104,-560 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,  55 },
 {   0,3148 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {   0,   0 }, {  72,-619 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, {   0,   0 },
 { 104,-619 }, {   0,   0 }, {   0,   0 }, {  48, -59 }, {  49, -59 },
 {  50, -59 }, {  51, -59 }, {  52, -59 }, {  53, -59 }, {  54, -59 },
 {  55, -59 }, {  56, -59 }, {  57, -59 }, {   0,   0 }, {   0,   0 },
 {   0,3088 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, -59 }, {  66, -59 }, {  67, -59 }, {  68, -59 }, {  69, -59 },

 {  70, -59 }, {   0,   0 }, {  72,-678 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,3063 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97, -59 }, {  98, -59 }, {  99, -59 },
 { 100, -59 }, { 101, -59 }, { 102, -59 }, {  43,2033 }, { 104,-678 },
 {  45,2033 }, {   0,   0 }, {   0,   0 }, {  48,2067 }, {  49,2067 },
 {  50,2067 }, {  51,2067 }, {  52,2067 }, {  53,2067 }, {  54,2067 },
 {  55,2067 }, {  56,2067 }, {  57,2067 }, {   0,  55 }, {   0,3029 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-119 }, {  66,-119 }, {  67,-119 }, {  68,-119 }, {  69,-119 },
 {  70,-119 }, {   0,   0 }, {  72,-738 }, {  48,2067 }, {  49,2067 },
 {  50,2067 }, {  51,2067 }, {  52,2067 }, {  53,2067 }, {  54,2067 },
 {  55,2067 }, {  56,2067 }, {  57,2067 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,2067 }, {  66,2067 }, {  67,2067 }, {  68,2067 }, {  69,2067 },
 {  70,2067 }, {   0,   0 }, {  97,-119 }, {  98,-119 }, {  99,-119 },
 { 100,-119 }, { 101,-119 }, { 102,-119 }, {   0,   0 }, { 104,-738 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },

 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,  56 }, {   0,2969 },
 {   0,   4 }, {   0,2967 }, {  97,2067 }, {  98,2067 }, {  99,2067 },
 { 100,2067 }, { 101,2067 }, { 102,2067 }, {   0,   5 }, {   0,2959 },
 {   9,   0 }, {  10,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,   0 }, {  95,   0 },
 {  36,-889 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  44,   0 }, {   0,   0 }, {  48,-889 }, {  49,-889 }, {  50,-889 },
 {  51,-889 }, {  52,-889 }, {  53,-889 }, {  54,-889 }, {  55,-889 },
 {  56,-889 }, {  57,-889 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-889 },
 {  66,-889 }, {  67,-889 }, {  68,-889 }, {  69,2032 }, {  70,-889 },
 {  71,-889 }, {  72,-889 }, {  73,-889 }, {  74,-889 }, {  75,-889 },
 {  76,-889 }, {  77,-889 }, {  78,-889 }, {  79,-889 }, {  80,-889 },
 {  81,-889 }, {  82,-889 }, {  83,-889 }, {  84,-889 }, {  85,-889 },
 {  86,-889 }, {  87,-889 }, {  88,-889 }, {  89,-889 }, {  90,-889 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-889 },
 {   0,   0 }, {  97,-889 }, {  98,-889 }, {  99,-889 }, { 100,-889 },
 { 101,2032 }, { 102,-889 }, { 103,-889 }, { 104,-889 }, { 105,-889 },
 { 106,-889 }, { 107,-889 }, { 108,-889 }, { 109,-889 }, { 110,-889 },
 { 111,-889 }, { 112,-889 }, { 113,-889 }, { 114,-889 }, { 115,-889 },
 { 116,-889 }, { 117,-889 }, { 118,-889 }, { 119,-889 }, { 120,-889 },
 { 121,-889 }, { 122,-889 }, {   0,  10 }, {   0,2845 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {   0,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },

 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,   0 }, {  59,-514 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },

 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 },
 {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },

 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 },
 { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 },
 { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 },
 { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 },
 { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 },
 { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 },
 { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 },
 { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 },
 { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 },

 { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 },
 { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 },
 { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 },
 { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 },
 { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 },
 { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 },
 { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 },
 { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 },
 { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 },
 { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 },

 { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 },
 { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 },
 { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 },
 { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 },
 { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 },
 { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 },
 { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 },
 { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 },
 {   0,   9 }, {   0,2587 }, {   1,-258 }, {   2,-258 }, {   3,-258 },
 {   4,-258 }, {   5,-258 }, {   6,-258 }, {   7,-258 }, {   8,-258 },

 {   9,   0 }, {  10,-769 }, {  11,-258 }, {  12,-258 }, {  13,-258 },
 {  14,-258 }, {  15,-258 }, {  16,-258 }, {  17,-258 }, {  18,-258 },
 {  19,-258 }, {  20,-258 }, {  21,-258 }, {  22,-258 }, {  23,-258 },
 {  24,-258 }, {  25,-258 }, {  26,-258 }, {  27,-258 }, {  28,-258 },
 {  29,-258 }, {  30,-258 }, {  31,-258 }, {  32,   0 }, {  33,-258 },
 {  34,-258 }, {  35,-258 }, {  36,-258 }, {  37,-258 }, {  38,-258 },
 {  39,-258 }, {  40,-258 }, {  41,-258 }, {  42,-258 }, {  43,-258 },
 {  44,-258 }, {  45,-258 }, {  46,-258 }, {  47,-258 }, {  48,-258 },
 {  49,-258 }, {  50,-258 }, {  51,-258 }, {  52,-258 }, {  53,-258 },
 {  54,-258 }, {  55,-258 }, {  56,-258 }, {  57,-258 }, {  58,-258 },

 {  59,-772 }, {  60,-258 }, {  61,-258 }, {  62,-258 }, {  63,-258 },
 {  64,-258 }, {  65,-258 }, {  66,-258 }, {  67,-258 }, {  68,-258 },
 {  69,-258 }, {  70,-258 }, {  71,-258 }, {  72,-258 }, {  73,-258 },
 {  74,-258 }, {  75,-258 }, {  76,-258 }, {  77,-258 }, {  78,-258 },
 {  79,-258 }, {  80,-258 }, {  81,-258 }, {  82,-258 }, {  83,-258 },
 {  84,-258 }, {  85,-258 }, {  86,-258 }, {  87,-258 }, {  88,-258 },
 {  89,-258 }, {  90,-258 }, {  91,-258 }, {  92,-258 }, {  93,-258 },
 {  94,-258 }, {  95,-258 }, {  96,-258 }, {  97,-258 }, {  98,-258 },
 {  99,-258 }, { 100,-258 }, { 101,-258 }, { 102,-258 }, { 103,-258 },
 { 104,-258 }, { 105,-258 }, { 106,-258 }, { 107,-258 }, { 108,-258 },

 { 109,-258 }, { 110,-258 }, { 111,-258 }, { 112,-258 }, { 113,-258 },
 { 114,-258 }, { 115,-258 }, { 116,-258 }, { 117,-258 }, { 118,-258 },
 { 119,-258 }, { 120,-258 }, { 121,-258 }, { 122,-258 }, { 123,-258 },
 { 124,-258 }, { 125,-258 }, { 126,-258 }, { 127,-258 }, { 128,-258 },
 { 129,-258 }, { 130,-258 }, { 131,-258 }, { 132,-258 }, { 133,-258 },
 { 134,-258 }, { 135,-258 }, { 136,-258 }, { 137,-258 }, { 138,-258 },
 { 139,-258 }, { 140,-258 }, { 141,-258 }, { 142,-258 }, { 143,-258 },
 { 144,-258 }, { 145,-258 }, { 146,-258 }, { 147,-258 }, { 148,-258 },
 { 149,-258 }, { 150,-258 }, { 151,-258 }, { 152,-258 }, { 153,-258 },
 { 154,-258 }, { 155,-258 }, { 156,-258 }, { 157,-258 }, { 158,-258 },

 { 159,-258 }, { 160,-258 }, { 161,-258 }, { 162,-258 }, { 163,-258 },
 { 164,-258 }, { 165,-258 }, { 166,-258 }, { 167,-258 }, { 168,-258 },
 { 169,-258 }, { 170,-258 }, { 171,-258 }, { 172,-258 }, { 173,-258 },
 { 174,-258 }, { 175,-258 }, { 176,-258 }, { 177,-258 }, { 178,-258 },
 { 179,-258 }, { 180,-258 }, { 181,-258 }, { 182,-258 }, { 183,-258 },
 { 184,-258 }, { 185,-258 }, { 186,-258 }, { 187,-258 }, { 188,-258 },
 { 189,-258 }, { 190,-258 }, { 191,-258 }, { 192,-258 }, { 193,-258 },
 { 194,-258 }, { 195,-258 }, { 196,-258 }, { 197,-258 }, { 198,-258 },
 { 199,-258 }, { 200,-258 }, { 201,-258 }, { 202,-258 }, { 203,-258 },
 { 204,-258 }, { 205,-258 }, { 206,-258 }, { 207,-258 }, { 208,-258 },

 { 209,-258 }, { 210,-258 }, { 211,-258 }, { 212,-258 }, { 213,-258 },
 { 214,-258 }, { 215,-258 }, { 216,-258 }, { 217,-258 }, { 218,-258 },
 { 219,-258 }, { 220,-258 }, { 221,-258 }, { 222,-258 }, { 223,-258 },
 { 224,-258 }, { 225,-258 }, { 226,-258 }, { 227,-258 }, { 228,-258 },
 { 229,-258 }, { 230,-258 }, { 231,-258 }, { 232,-258 }, { 233,-258 },
 { 234,-258 }, { 235,-258 }, { 236,-258 }, { 237,-258 }, { 238,-258 },
 { 239,-258 }, { 240,-258 }, { 241,-258 }, { 242,-258 }, { 243,-258 },
 { 244,-258 }, { 245,-258 }, { 246,-258 }, { 247,-258 }, { 248,-258 },
 { 249,-258 }, { 250,-258 }, { 251,-258 }, { 252,-258 }, { 253,-258 },
 { 254,-258 }, { 255,-258 }, { 256,-258 }, {   0,   6 }, {   0,2329 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  46,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },

 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,   0 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },

 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,   0 }, {   0,2205 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {  10,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },

 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },
 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,   0 }, {  59,   0 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },

 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },
 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 },
 {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,-754 }, { 126,   0 },

 { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 },
 { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 },
 { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 },
 { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 },
 { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 },
 { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 },
 { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 },
 { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 },
 { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 },
 { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 },

 { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 },
 { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 },
 { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 },
 { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 },
 { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 },
 { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 },
 { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 },
 { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 },
 { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 },
 { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 },

 { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 },
 { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 },
 { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 },
 { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 },
 { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 },
 { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 },
 {   0,  57 }, {   0,1947 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,1924 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  35,  23 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  39, 104 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {  36,-2017 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },

 {  69,   0 }, {  70,   0 }, {  48,-1994 }, {  49,-1994 }, {  50,-1994 },
 {  51,-1994 }, {  52,-1994 }, {  53,-1994 }, {  54,-1994 }, {  55,-1994 },
 {  56,-1994 }, {  57,-1994 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, {   0,   0 },
 {   0,1843 }, {   1,-1799 }, {   2,-1799 }, {   3,-1799 }, {   4,-1799 },
 {   5,-1799 }, {   6,-1799 }, {   7,-1799 }, {   8,-1799 }, {   9,-1799 },
 {  10,-1799 }, {  11,-1799 }, {  12,-1799 }, {  13,-1799 }, {  14,-1799 },

 {  15,-1799 }, {  16,-1799 }, {  17,-1799 }, {  18,-1799 }, {  19,-1799 },
 {  20,-1799 }, {  21,-1799 }, {  22,-1799 }, {  23,-1799 }, {  24,-1799 },
 {  25,-1799 }, {  26,-1799 }, {  27,-1799 }, {  28,-1799 }, {  29,-1799 },
 {  30,-1799 }, {  31,-1799 }, {  32,-1799 }, {  33,-1799 }, {  34,-1799 },
 {  35,-1799 }, {  36,-1799 }, {  37,-1799 }, {  38,-1799 }, {  39,-2013 },
 {  40,-1799 }, {  41,-1799 }, {  42,-1799 }, {  43,-1799 }, {  44,-1799 },
 {  45,-1799 }, {  46,-1799 }, {  47,-1799 }, {  48,-1799 }, {  49,-1799 },
 {  50,-1799 }, {  51,-1799 }, {  52,-1799 }, {  53,-1799 }, {  54,-1799 },
 {  55,-1799 }, {  56,-1799 }, {  57,-1799 }, {  58,-1799 }, {  59,-1799 },
 {  60,-1799 }, {  61,-1799 }, {  62,-1799 }, {  63,-1799 }, {  64,-1799 },

 {  65,-1799 }, {  66,-1799 }, {  67,-1799 }, {  68,-1799 }, {  69,-1799 },
 {  70,-1799 }, {  71,-1799 }, {  72,-1799 }, {  73,-1799 }, {  74,-1799 },
 {  75,-1799 }, {  76,-1799 }, {  77,-1799 }, {  78,-1799 }, {  79,-1799 },
 {  80,-1799 }, {  81,-1799 }, {  82,-1799 }, {  83,-1799 }, {  84,-1799 },
 {  85,-1799 }, {  86,-1799 }, {  87,-1799 }, {  88,-1799 }, {  89,-1799 },
 {  90,-1799 }, {  91,-1799 }, {  92,-1799 }, {  93,-1799 }, {  94,-1799 },
 {  95,-1799 }, {  96,-1799 }, {  97,-1799 }, {  98,-1799 }, {  99,-1799 },
 { 100,-1799 }, { 101,-1799 }, { 102,-1799 }, { 103,-1799 }, { 104,-1799 },
 { 105,-1799 }, { 106,-1799 }, { 107,-1799 }, { 108,-1799 }, { 109,-1799 },
 { 110,-1799 }, { 111,-1799 }, { 112,-1799 }, { 113,-1799 }, { 114,-1799 },

 { 115,-1799 }, { 116,-1799 }, { 117,-1799 }, { 118,-1799 }, { 119,-1799 },
 { 120,-1799 }, { 121,-1799 }, { 122,-1799 }, { 123,-1799 }, { 124,-1799 },
 { 125,-1799 }, { 126,-1799 }, { 127,-1799 }, { 128,-1799 }, { 129,-1799 },
 { 130,-1799 }, { 131,-1799 }, { 132,-1799 }, { 133,-1799 }, { 134,-1799 },
 { 135,-1799 }, { 136,-1799 }, { 137,-1799 }, { 138,-1799 }, { 139,-1799 },
 { 140,-1799 }, { 141,-1799 }, { 142,-1799 }, { 143,-1799 }, { 144,-1799 },
 { 145,-1799 }, { 146,-1799 }, { 147,-1799 }, { 148,-1799 }, { 149,-1799 },
 { 150,-1799 }, { 151,-1799 }, { 152,-1799 }, { 153,-1799 }, { 154,-1799 },
 { 155,-1799 }, { 156,-1799 }, { 157,-1799 }, { 158,-1799 }, { 159,-1799 },
 { 160,-1799 }, { 161,-1799 }, { 162,-1799 }, { 163,-1799 }, { 164,-1799 },

 { 165,-1799 }, { 166,-1799 }, { 167,-1799 }, { 168,-1799 }, { 169,-1799 },
 { 170,-1799 }, { 171,-1799 }, { 172,-1799 }, { 173,-1799 }, { 174,-1799 },
 { 175,-1799 }, { 176,-1799 }, { 177,-1799 }, { 178,-1799 }, { 179,-1799 },
 { 180,-1799 }, { 181,-1799 }, { 182,-1799 }, { 183,-1799 }, { 184,-1799 },
 { 185,-1799 }, { 186,-1799 }, { 187,-1799 }, { 188,-1799 }, { 189,-1799 },
 { 190,-1799 }, { 191,-1799 }, { 192,-1799 }, { 193,-1799 }, { 194,-1799 },
 { 195,-1799 }, { 196,-1799 }, { 197,-1799 }, { 198,-1799 }, { 199,-1799 },
 { 200,-1799 }, { 201,-1799 }, { 202,-1799 }, { 203,-1799 }, { 204,-1799 },
 { 205,-1799 }, { 206,-1799 }, { 207,-1799 }, { 208,-1799 }, { 209,-1799 },
 { 210,-1799 }, { 211,-1799 }, { 212,-1799 }, { 213,-1799 }, { 214,-1799 },

 { 215,-1799 }, { 216,-1799 }, { 217,-1799 }, { 218,-1799 }, { 219,-1799 },
 { 220,-1799 }, { 221,-1799 }, { 222,-1799 }, { 223,-1799 }, { 224,-1799 },
 { 225,-1799 }, { 226,-1799 }, { 227,-1799 }, { 228,-1799 }, { 229,-1799 },
 { 230,-1799 }, { 231,-1799 }, { 232,-1799 }, { 233,-1799 }, { 234,-1799 },
 { 235,-1799 }, { 236,-1799 }, { 237,-1799 }, { 238,-1799 }, { 239,-1799 },
 { 240,-1799 }, { 241,-1799 }, { 242,-1799 }, { 243,-1799 }, { 244,-1799 },
 { 245,-1799 }, { 246,-1799 }, { 247,-1799 }, { 248,-1799 }, { 249,-1799 },
 { 250,-1799 }, { 251,-1799 }, { 252,-1799 }, { 253,-1799 }, { 254,-1799 },
 { 255,-1799 }, { 256,-1799 }, {   0,   0 }, {   0,1585 }, {   0,   0 },
 {   0,  55 }, {   0,1582 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,1558 }, {   0,  34 }, {   0,1556 }, {   0,  33 }, {   0,1554 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  36,-2276 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },

 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  67, 398 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,-2276 }, {  72,-2276 }, {  73,-2276 },
 {  74,-2276 }, {  75,-2276 }, {  76,-2276 }, {  77,-2276 }, {  78,-2276 },
 {  79,-2276 }, {  80,-2276 }, {  81,-2276 }, {  82,-2276 }, {  83,-2276 },
 {  84,-2276 }, {  85,-2276 }, {  86,-2276 }, {  87,-2276 }, {  88,-2276 },
 {  89,-2276 }, {  90,-2276 }, {  67, 373 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,   0 }, {  99, 398 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,-2276 },

 { 104,-2276 }, { 105,-2276 }, { 106,-2276 }, { 107,-2276 }, { 108,-2276 },
 { 109,-2276 }, { 110,-2276 }, { 111,-2276 }, { 112,-2276 }, { 113,-2276 },
 { 114,-2276 }, { 115,-2276 }, { 116,-2276 }, { 117,-2276 }, { 118,-2276 },
 { 119,-2276 }, { 120,-2276 }, { 121,-2276 }, { 122,-2276 }, {  99, 373 },
 {   0,   0 }, {   0,1457 }, {   1,-2185 }, {   2,-2185 }, {   3,-2185 },
 {   4,-2185 }, {   5,-2185 }, {   6,-2185 }, {   7,-2185 }, {   8,-2185 },
 {   9,-2185 }, {  10,-2185 }, {  11,-2185 }, {  12,-2185 }, {  13,-2185 },
 {  14,-2185 }, {  15,-2185 }, {  16,-2185 }, {  17,-2185 }, {  18,-2185 },
 {  19,-2185 }, {  20,-2185 }, {  21,-2185 }, {  22,-2185 }, {  23,-2185 },
 {  24,-2185 }, {  25,-2185 }, {  26,-2185 }, {  27,-2185 }, {  28,-2185 },

 {  29,-2185 }, {  30,-2185 }, {  31,-2185 }, {  32,-2185 }, {  33,-2185 },
 {  34,-2185 }, {  35,-2185 }, {  36,-2185 }, {  37,-2185 }, {  38,-2185 },
 {  39,-2399 }, {  40,-2185 }, {  41,-2185 }, {  42,-2185 }, {  43,-2185 },
 {  44,-2185 }, {  45,-2185 }, {  46,-2185 }, {  47,-2185 }, {  48,-2185 },
 {  49,-2185 }, {  50,-2185 }, {  51,-2185 }, {  52,-2185 }, {  53,-2185 },
 {  54,-2185 }, {  55,-2185 }, {  56,-2185 }, {  57,-2185 }, {  58,-2185 },
 {  59,-2185 }, {  60,-2185 }, {  61,-2185 }, {  62,-2185 }, {  63,-2185 },
 {  64,-2185 }, {  65,-2185 }, {  66,-2185 }, {  67,-2185 }, {  68,-2185 },
 {  69,-2185 }, {  70,-2185 }, {  71,-2185 }, {  72,-2185 }, {  73,-2185 },
 {  74,-2185 }, {  75,-2185 }, {  76,-2185 }, {  77,-2185 }, {  78,-2185 },

 {  79,-2185 }, {  80,-2185 }, {  81,-2185 }, {  82,-2185 }, {  83,-2185 },
 {  84,-2185 }, {  85,-2185 }, {  86,-2185 }, {  87,-2185 }, {  88,-2185 },
 {  89,-2185 }, {  90,-2185 }, {  91,-2185 }, {  92,-2185 }, {  93,-2185 },
 {  94,-2185 }, {  95,-2185 }, {  96,-2185 }, {  97,-2185 }, {  98,-2185 },
 {  99,-2185 }, { 100,-2185 }, { 101,-2185 }, { 102,-2185 }, { 103,-2185 },
 { 104,-2185 }, { 105,-2185 }, { 106,-2185 }, { 107,-2185 }, { 108,-2185 },
 { 109,-2185 }, { 110,-2185 }, { 111,-2185 }, { 112,-2185 }, { 113,-2185 },
 { 114,-2185 }, { 115,-2185 }, { 116,-2185 }, { 117,-2185 }, { 118,-2185 },
 { 119,-2185 }, { 120,-2185 }, { 121,-2185 }, { 122,-2185 }, { 123,-2185 },
 { 124,-2185 }, { 125,-2185 }, { 126,-2185 }, { 127,-2185 }, { 128,-2185 },

 { 129,-2185 }, { 130,-2185 }, { 131,-2185 }, { 132,-2185 }, { 133,-2185 },
 { 134,-2185 }, { 135,-2185 }, { 136,-2185 }, { 137,-2185 }, { 138,-2185 },
 { 139,-2185 }, { 140,-2185 }, { 141,-2185 }, { 142,-2185 }, { 143,-2185 },
 { 144,-2185 }, { 145,-2185 }, { 146,-2185 }, { 147,-2185 }, { 148,-2185 },
 { 149,-2185 }, { 150,-2185 }, { 151,-2185 }, { 152,-2185 }, { 153,-2185 },
 { 154,-2185 }, { 155,-2185 }, { 156,-2185 }, { 157,-2185 }, { 158,-2185 },
 { 159,-2185 }, { 160,-2185 }, { 161,-2185 }, { 162,-2185 }, { 163,-2185 },
 { 164,-2185 }, { 165,-2185 }, { 166,-2185 }, { 167,-2185 }, { 168,-2185 },
 { 169,-2185 }, { 170,-2185 }, { 171,-2185 }, { 172,-2185 }, { 173,-2185 },
 { 174,-2185 }, { 175,-2185 }, { 176,-2185 }, { 177,-2185 }, { 178,-2185 },

 { 179,-2185 }, { 180,-2185 }, { 181,-2185 }, { 182,-2185 }, { 183,-2185 },
 { 184,-2185 }, { 185,-2185 }, { 186,-2185 }, { 187,-2185 }, { 188,-2185 },
 { 189,-2185 }, { 190,-2185 }, { 191,-2185 }, { 192,-2185 }, { 193,-2185 },
 { 194,-2185 }, { 195,-2185 }, { 196,-2185 }, { 197,-2185 }, { 198,-2185 },
 { 199,-2185 }, { 200,-2185 }, { 201,-2185 }, { 202,-2185 }, { 203,-2185 },
 { 204,-2185 }, { 205,-2185 }, { 206,-2185 }, { 207,-2185 }, { 208,-2185 },
 { 209,-2185 }, { 210,-2185 }, { 211,-2185 }, { 212,-2185 }, { 213,-2185 },
 { 214,-2185 }, { 215,-2185 }, { 216,-2185 }, { 217,-2185 }, { 218,-2185 },
 { 219,-2185 }, { 220,-2185 }, { 221,-2185 }, { 222,-2185 }, { 223,-2185 },
 { 224,-2185 }, { 225,-2185 }, { 226,-2185 }, { 227,-2185 }, { 228,-2185 },

 { 229,-2185 }, { 230,-2185 }, { 231,-2185 }, { 232,-2185 }, { 233,-2185 },
 { 234,-2185 }, { 235,-2185 }, { 236,-2185 }, { 237,-2185 }, { 238,-2185 },
 { 239,-2185 }, { 240,-2185 }, { 241,-2185 }, { 242,-2185 }, { 243,-2185 },
 { 244,-2185 }, { 245,-2185 }, { 246,-2185 }, { 247,-2185 }, { 248,-2185 },
 { 249,-2185 }, { 250,-2185 }, { 251,-2185 }, { 252,-2185 }, { 253,-2185 },
 { 254,-2185 }, { 255,-2185 }, { 256,-2185 }, {   0,  55 }, {   0,1199 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,1187 }, {   0,   0 }, {   0,1185 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,1181 }, {   0,   0 }, {   0,1179 },

 {   0,   0 }, {   0,  54 }, {   0,1176 }, {   0,   0 }, {   0,   0 },
 {   0,1173 }, {   0,  12 }, {   0,1171 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,1160 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48, 478 }, {  49, 478 }, {  50, 478 },
 {  51, 478 }, {  52, 478 }, {  53, 478 }, {  54, 478 }, {  55, 478 },
 {  56, 478 }, {  57, 478 }, {  32,   0 }, {   0,  55 }, {   0,1139 },
 {   0,   0 }, {   0,   0 }, {   0,1136 }, {   0,   0 }, {  65, 478 },
 {  66, 478 }, {  67, 478 }, {  68, 478 }, {  69, 478 }, {  70, 478 },

 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  76,   6 }, {   0,   0 }, {  76,   6 },
 {   0,   0 }, {  69, 487 }, {   0,   0 }, {   0,   0 }, {  95, 478 },
 {   0,   0 }, {  97, 478 }, {  98, 478 }, {  99, 478 }, { 100, 478 },
 { 101, 478 }, { 102, 478 }, {  85,  21 }, {   0,   0 }, {  85,  43 },
 {  46,-2222 }, {  68, 102 }, {  48,   0 }, {  49,   0 }, {  50,  59 },
 {  51,  59 }, {  52,  59 }, {  53,  59 }, {  54,  59 }, {  55,  59 },
 {  56,  59 }, {  57,  59 }, {   0,  55 }, {   0,1080 }, { 108,   6 },

 {   0,   0 }, { 108,   6 }, {   0,   0 }, { 101, 487 }, {  65,-2068 },
 {  66,-2009 }, {  67,-2068 }, {  68,-2068 }, {  69,-1949 }, {  70,-2068 },
 {  68, 117 }, {  72,-2687 }, {   0,   0 }, {   0,   0 }, { 117,  21 },
 {   0,   0 }, { 117,  43 }, {   0,   0 }, { 100, 102 }, {   0,   0 },
 {   0,1058 }, {   0,   0 }, {   0,   0 }, {   0,1055 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 125,   2 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-1890 },
 {   0,   0 }, {  97,-2068 }, {  98,-2009 }, {  99,-2068 }, { 100,-2068 },
 { 101,-1949 }, { 102,-2068 }, { 100, 117 }, { 104,-2687 }, {  46,-2281 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },

 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,  54 }, {   0,1021 }, {   0,   0 }, {   0,1019 },
 {   0,   2 }, {   0,1017 }, {   0,   0 }, {  65,-2127 }, {  66,-2127 },
 {  67,-2127 }, {  68,-2127 }, {  69,-2008 }, {  70,-2127 }, {   0,   0 },
 {  72,-2746 }, {  48, 393 }, {  49, 393 }, {  50, 393 }, {  51, 393 },
 {  52, 393 }, {  53, 393 }, {  54, 393 }, {  55, 393 }, {  56, 393 },
 {  57, 393 }, {   0,  55 }, {   0, 996 }, {   0,   1 }, {   0, 994 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  69,  41 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-1949 }, {   0,   0 },
 {  97,-2127 }, {  98,-2127 }, {  99,-2127 }, { 100,-2127 }, { 101,-2008 },

 { 102,-2127 }, {   0,   0 }, { 104,-2746 }, {   0,   0 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, { 101,  41 }, {  65,-2186 }, {  66,-2186 }, {  67,-2186 },
 {  68,-2186 }, {  69,-2186 }, {  70,-2186 }, {  69,  25 }, {  72,-2805 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,  56 }, {   0, 937 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },

 {  68,   0 }, {  69,   0 }, {  70,   0 }, {   0,   0 }, {  97,-2186 },
 {  98,-2186 }, {  99,-2186 }, { 100,-2186 }, { 101,-2186 }, { 102,-2186 },
 { 101,  25 }, { 104,-2805 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  36,-2921 }, {   0,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,-2921 },
 {  49,-2921 }, {  50,-2921 }, {  51,-2921 }, {  52,-2921 }, {  53,-2921 },
 {  54,-2921 }, {  55,-2921 }, {  56,-2921 }, {  57,-2921 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-2921 }, {  66,-2921 }, {  67,-2921 }, {  68,-2921 },
 {  69,-2921 }, {  70,-2921 }, {  71,-2921 }, {  72,-2921 }, {  73,-2921 },
 {  74,-2921 }, {  75,-2921 }, {  76,-2921 }, {  77,-2921 }, {  78,-2921 },
 {  79,-2921 }, {  80,-2921 }, {  81,-2921 }, {  82,-2921 }, {  83, 307 },
 {  84,-2921 }, {  85,-2921 }, {  86,-2921 }, {  87,-2921 }, {  88,-2921 },
 {  89,-2921 }, {  90,-2921 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,-2921 }, {   0,   0 }, {  97,-2921 }, {  98,-2921 },
 {  99,-2921 }, { 100,-2921 }, { 101,-2921 }, { 102,-2921 }, { 103,-2921 },
 { 104,-2921 }, { 105,-2921 }, { 106,-2921 }, { 107,-2921 }, { 108,-2921 },

 { 109,-2921 }, { 110,-2921 }, { 111,-2921 }, { 112,-2921 }, { 113,-2921 },
 { 114,-2921 }, { 115, 307 }, { 116,-2921 }, { 117,-2921 }, { 118,-2921 },
 { 119,-2921 }, { 120,-2921 }, { 121,-2921 }, { 122,-2921 }, {   0,   0 },
 {   0, 813 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9, 307 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32, 307 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  46, 431 }, {   0,   0 }, {  48, 431 }, {  49, 431 },
 {  50, 431 }, {  51, 431 }, {  52, 431 }, {  53, 431 }, {  54, 431 },
 {  55, 431 }, {  56, 431 }, {  57, 431 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, 431 }, {  66, 431 }, {  67, 431 }, {  68, 431 }, {  69, 431 },
 {  70, 431 }, {  71, 431 }, {  72, 431 }, {  73, 431 }, {  74, 431 },
 {  75, 431 }, {  76, 431 }, {  77, 431 }, {  78, 431 }, {  79, 431 },
 {  80, 431 }, {  81, 431 }, {  82, 431 }, {  83, 431 }, {  84, 431 },

 {  85, 431 }, {  86, 431 }, {  87, 431 }, {  88, 431 }, {  89, 431 },
 {  90, 431 }, {   0,  55 }, {   0, 721 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97, 431 }, {  98, 431 }, {  99, 431 },
 { 100, 431 }, { 101, 431 }, { 102, 431 }, { 103, 431 }, { 104, 431 },
 { 105, 431 }, { 106, 431 }, { 107, 431 }, { 108, 431 }, { 109, 431 },
 { 110, 431 }, { 111, 431 }, { 112, 431 }, { 113, 431 }, { 114, 431 },
 { 115, 431 }, { 116, 431 }, { 117, 431 }, { 118, 431 }, { 119, 431 },
 { 120, 431 }, { 121, 431 }, { 122, 431 }, {   0,   0 }, {   0, 689 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,  54 }, {   0, 662 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  43, 399 }, {   0,   0 }, {  45, 399 },
 {   0,   0 }, {   0,   0 }, {  48, 431 }, {  49, 431 }, {  50, 431 },
 {  51, 431 }, {  52, 431 }, {  53, 431 }, {  54, 431 }, {  55, 431 },
 {  56, 431 }, {  57, 431 }, {   0,   3 }, {   0, 630 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  95,   0 }, {   0,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,-3228 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-3228 }, {  49,-3228 }, {  50,-3228 }, {  51,-3228 },

 {  52,-3228 }, {  53,-3228 }, {  54,-3228 }, {  55,-3228 }, {  56,-3228 },
 {  57,-3228 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-3228 }, {  66,-3228 },
 {  67,-3228 }, {  68,-3228 }, {  69,-3228 }, {  70,-3228 }, {  71,-3228 },
 {  72,-3228 }, {  73,-3228 }, {  74,-3228 }, {  75,-3228 }, {  76,-3228 },
 {  77,-3228 }, {  78,-3228 }, {  79,-3228 }, {  80,-3228 }, {  81,-3228 },
 {  82,-3228 }, {  83,-3228 }, {  84,-3228 }, {  85,-3228 }, {  86,-3228 },
 {  87,-3228 }, {  88,-3228 }, {  89,-3228 }, {  90,-3228 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-3228 }, {   0,   0 },
 {  97,-3228 }, {  98,-3228 }, {  99,-3228 }, { 100,-3228 }, { 101,-3228 },

 { 102,-3228 }, { 103,-3228 }, { 104,-3228 }, { 105,-3228 }, { 106,-3228 },
 { 107,-3228 }, { 108,-3228 }, { 109,-3228 }, { 110,-3228 }, { 111,-3228 },
 { 112,-3228 }, { 113,-3228 }, { 114,-3228 }, { 115,-3228 }, { 116,-3228 },
 { 117,-3228 }, { 118,-3228 }, { 119,-3228 }, { 120,-3228 }, { 121,-3228 },
 { 122,-3228 }, {   0,   0 }, {   0, 506 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46, 124 }, {   0,   0 },
 {  48, 124 }, {  49, 124 }, {  50, 124 }, {  51, 124 }, {  52, 124 },
 {  53, 124 }, {  54, 124 }, {  55, 124 }, {  56, 124 }, {  57, 124 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65, 124 }, {  66, 124 }, {  67, 124 },
 {  68, 124 }, {  69, 124 }, {  70, 124 }, {  71, 124 }, {  72, 124 },
 {  73, 124 }, {  74, 124 }, {  75, 124 }, {  76, 124 }, {  77, 124 },

 {  78, 124 }, {  79, 124 }, {  80, 124 }, {  81, 124 }, {  82, 124 },
 {  83, 124 }, {  84, 124 }, {  85, 124 }, {  86, 124 }, {  87, 124 },
 {  88, 124 }, {  89, 124 }, {  90, 124 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, 124 },
 {  98, 124 }, {  99, 124 }, { 100, 124 }, { 101, 124 }, { 102, 124 },
 { 103, 124 }, { 104, 124 }, { 105, 124 }, { 106, 124 }, { 107, 124 },
 { 108, 124 }, { 109, 124 }, { 110, 124 }, { 111, 124 }, { 112, 124 },
 { 113, 124 }, { 114, 124 }, { 115, 124 }, { 116, 124 }, { 117, 124 },
 { 118, 124 }, { 119, 124 }, { 120, 124 }, { 121, 124 }, { 122, 124 },
 {   0,   0 }, {   0, 382 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   9,-791 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,-791 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  46,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },

 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {   0,   0 }, {   0, 290 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },

 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,  54 },
 {   0, 258 }, { 125,-789 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,  32 }, {  49,  32 }, {  50,  32 }, {  51,  32 },
 {  52,  32 }, {  53,  32 }, {  54,  32 }, {  55,  32 }, {  56,  32 },
 {  57,  32 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 257,  62 }, {   1,   0 },    };

static const struct yy_trans_info *yy_start_state_list[7] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.l"
#line 2 "lex.l"

#include "token.h"
#include "util.h"

#ifdef _WIN32
#include <io.h>
#define FILE_SEP "\\"
#else
#include <unistd.h>
#define FILE_SEP "/"
#endif

#define yywrap() 1
#define YY_SKIP_YYWRAP 1

#define YY_NO_UNPUT 1

// Some static data definition

static char *file_name;
static int line, pos;    // Token position
extern char *i_path;

struct scan_state {
    int             pos;
    int             line;
    char*           file_name;
    char*           search_path;
    FILE*           input;
    YY_BUFFER_STATE buffer;
};

#define MAX_INCLUDE_DEPTH 256   // Include stack depth
#define MAX_ID_LENGTH     256

class scan_ctx {
  protected:
    scan_state      stack[ MAX_INCLUDE_DEPTH ];
    int             sp;

  public:
    void push();
    void attach(char* name, FILE* in);
    void pop();
    bool empty() { return sp == 0; }
    bool find(char* name) ;
    scan_ctx() { sp = 0; }
};

static scan_ctx scanner;
static int type_or_var_context;


void scanner_input(char *file)
{
    FILE* f = fopen (file, "r");

    if (f == NULL) {
	error("can't open input source file: %s", file);
    }
    scanner.attach(file, f);
}


// Hints for macro functionality (inherited from rtl2c)
static nm_entry *nm = NULL;	       // Token name
static char *text   = NULL;            // Token text if != NULL

static int include_level;

class use_ctx {
  public:
    char* fname;
    use_ctx* next;

    use_ctx(char* name, use_ctx* chain) {
	fname = name;
	next = chain;
    }
};

static use_ctx* use_chain;

#undef  ECHO
#define ECHO

// Token generator function

int tkn (int tag) {
   curr_token = new token(text ? text : mystrdup(yytext),
			  tag, line, pos, nm);
   nm = NULL; text = NULL;
   for (char *c = yytext; *c != 0; c++) {
       if (*c == '\n') { line++; pos = 0; }
       else if (*c == '\t') { pos += TAB_WIDTH - (pos % TAB_WIDTH); }
       else pos++;
   }
   curr_token->fname = file_name;
   if (include_level > 0) {
       curr_token->attr |= token::from_include_file;
   }
   return 1;
}



// Include file name processing

static char *include_name (char *src) {
    char *t;
    char *name = new char[strlen(src)+8];
    char *dst = name;
    if (strchr(src, '\n') != NULL) {
        line += 1;
        pos = 0;
    }
    while (*src == '\'' || isspace(*src)) src++;        // Skip leading '[ ]
    if ((t = strchr (src, '[')) != NULL) {
#if 0
        int gid, uid, n;
        if (sscanf(t, "[%d,%d]%n", &gid, &uid, &n) == 2) {
            dst += sprintf(dst, "../%03d%03d/", gid, uid);
	    src = t + n;
        }
	else
#endif
	{
	    if ((t = strrchr(src, ']')) != NULL) {
	        src = t+1;
            }
        }
    }
    bool suffix = FALSE;
    while(*src && !isspace(*src) && *src != ';' && *src != '\''
          && *src!='\n' && *src != '}')
    {
        if (*src == '.') suffix = TRUE;
	*dst++ = tolower(*(unsigned char*)src++);
    }
    *dst = 0;
    if (!suffix) strcpy(dst, ".pas");

    if (scanner.find(name)) {
	error(line, pos, file_name, "file %s already included !\n", name);
    }
    return name;
}

static int yyinput(void);

inline int yyinput_file() {
    int ch = yyinput();
    if (ch == '\n') { line++; pos = 0; }
    else if (ch == '\t') { pos += TAB_WIDTH - (pos % TAB_WIDTH); }
    else pos++;
    return ch;
}

static int process_end_of_line_comment() {
    char cmt_buf[1024];
    char* p = cmt_buf;
    int c;
    *p++ = '/';
    *p++ = '/';
    while((c = yyinput_file()) != EOF) {
        if (c == '\n') {
           *p++ = '\n';
           *p = '\0';
           curr_token = new token(NULL, TKN_CMNT, line, pos);
           curr_token->in_text = curr_token->out_text = ::mystrdup(cmt_buf);
           return 1;
        } else {
           *p++ = (char)c;
        }
    }
    error(line, pos, file_name, "EOF in comment !\n");
    return -1;
}

static int process_comments() {
    static int cmt_buf_len = 256;
    static char* cmt_buf = new char[cmt_buf_len];
    int c, pc = 0;
    char *p = cmt_buf;
    char cmt_start = *yytext;
    *p++ = '/';
    *p++ = '*';

    curr_token = new token(NULL, TKN_CMNT, line, pos);

    pos += strlen(yytext);

    if (nested_comments) {
	while((c = yyinput_file()) != EOF) {
	    if (c == '/' && pc == '*') c = ' ';
	    if (p == cmt_buf + cmt_buf_len) {
		cmt_buf = (char*)realloc(cmt_buf, 2*cmt_buf_len);
		p = cmt_buf + cmt_buf_len;
		cmt_buf_len *= 2;
	    }
	    if ((cmt_start == '{' && c == '}') ||
		(cmt_start == '(' && c == ')' && pc == '*'))
            {
		size_t len = p - cmt_buf;
		char* cmt_text = new char[len + 3];
		memcpy(cmt_text, cmt_buf, len);
		if (pc != '*') cmt_text[len++] = '*';
		cmt_text[len++] = '/';
		cmt_text[len] = '\0';
                if (turbo_pascal && cmt_text[2] == '$') {
                   *p = '\0';
                   if (strincmp(cmt_text+3, "IFDEF", 5) == 0) {
                      sprintf(cmt_text, "#ifdef %s", cmt_buf+9);
                   } else if (strincmp(cmt_text+3, "ELSE", 4) == 0) {
                      sprintf(cmt_text, "#else");
                   } else if (strincmp(cmt_text+3, "ENDIF", 5) == 0) {
                      sprintf(cmt_text, "#endif");
                   } else if (strincmp(cmt_text+3, "IFNDEF", 6) == 0) {
                      sprintf(cmt_text, "#ifndef %s", cmt_buf+10);
                   } else if (strincmp(cmt_text+3, "DEFINE", 6) == 0) {
                      sprintf(cmt_text, "#define %s", cmt_buf+10);
                   } else if (strincmp(cmt_text+3, "IFOPT", 5) == 0) {
		      int value = 1;
                      char* p = strchr(cmt_text+8, '+');
		      if (p != NULL) *p = '\0';
		      else if ((p = strchr(cmt_text+8, '-')) != NULL) {
			value = 0;
			*p = '\0';
		      }
		      for (p = cmt_buf+8; *p == ' '; p++);
                      sprintf(cmt_text, "#if OPTION_%s == %d",
			      p, value);
                   }
                }
		curr_token->in_text = curr_token->out_text = cmt_text;
		return 1;
	    }
	    *p++ = pc = c;
	}
    } else {
	while((c = yyinput_file()) != EOF) {
	    if (c == '/' && pc == '*') c = ' ';
	    if (p == cmt_buf + cmt_buf_len) {
		cmt_buf = (char*)realloc(cmt_buf, 2*cmt_buf_len);
		p = cmt_buf + cmt_buf_len;
		cmt_buf_len *= 2;
	    }
	    if (c == '}' || (c == ')' && pc == '*')) {
		size_t len = p - cmt_buf;
		char* cmt_text = new char[len + 3];
		memcpy(cmt_text, cmt_buf, len);
		if (pc != '*') cmt_text[len++] = '*';
		cmt_text[len++] = '/';
		cmt_text[len] = '\0';
		curr_token->in_text = curr_token->out_text = cmt_text;
		return 1;
	    }
	    *p++ = pc = c;
	}
    }
    error(line, pos, file_name, "EOF in comment !\n");
    return -1;
}

#line 2259 "lex.cxx"
/* the "incl" state is used for picking up the name
 * of an include file
 */

#line 2264 "lex.cxx"

#define INITIAL 0
#define incl 1
#define use 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = (int) _read( _fileno(yyin), buf, (yy_size_t) max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 291 "lex.l"


#line 2470 "lex.cxx"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start)];
yy_match:
		{
		const struct yy_trans_info *yy_trans_info;

		YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 293 "lex.l"
BEGIN(incl);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 294 "lex.l"
BEGIN(incl);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 295 "lex.l"
BEGIN(use); /* go to the 'uses' section mode, Turbo Pascal */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 297 "lex.l"
{  // skip whitespaces and commas in list of unit names from 'uses' section
    char* p = yytext;
    while(*p != '\0') {
	if (*p++ == '\n') line += 1;
    }
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 304 "lex.l"
{ /* skip comments */
    char* p = yytext;
    while(*p != '\0') {
	if (*p++ == '\n') line += 1;
    }
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 311 "lex.l"
{ // file name can contain dot ('.') in its name
                  /* got the include file name */
    char *fname = dprintf("%s.pas", yytext);
    for (char* p = fname; *p != '\0'; p++) *p = tolower(*p);

    use_ctx* up;
    for (up = use_chain; // check whether we processed this this earlier
	 up != NULL && strcmp(fname, up->fname) != 0;
	 up = up->next);

    if (up == NULL) {
        char *xname;
        FILE *in = NULL;
        char *try_dir, *next_dir;
        int dir_length;

	for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	    if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
		dir_length = next_dir - try_dir;
		next_dir++;
	    } else {
		dir_length = strlen (try_dir);
	    }
	    xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	    if ((in = fopen(xname, "r")) != NULL) {
		use_chain = new use_ctx(fname, use_chain);
		curr_token = new token(xname, TKN_PUSH_UNIT);
		curr_token->out_text = fname;
		include_level += 1;
		BEGIN(INITIAL);     // To leave include state
		scanner.push();
		scanner.attach(xname, in);
		return 1;
	    }
	} // for

	warning(line, pos, file_name, "can't include file %s", fname);
        curr_token = new token(dprintf("/*#include \"%s.h\"*/\n", yytext),
	                       TKN_CMNT, line, pos);
    } else { // the file has been processed earlier
        curr_token = new token(dprintf("#include \"%s.h\"\n", yytext),
	                       TKN_CMNT, line, pos);
    }
    return 1;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 356 "lex.l"
{
    BEGIN(INITIAL);     // To leave include state
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 361 "lex.l"
{
    error(line, pos, file_name, "unrecognized token: %s\n",
		yytext);
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 369 "lex.l"
{  /* eat the whitespace */
    char* p = yytext;
    while(*p != '\0') {
	if (*p++ == '\n') line += 1;
    }
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 375 "lex.l"
{
                  /* got the include file name */
    BEGIN(INITIAL);     // To leave include state

    char *fname = include_name (yytext);
    char *xname;
    FILE *in = NULL;
    char *try_dir, *next_dir;
    int dir_length;

    for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
	    dir_length = next_dir - try_dir;
	    next_dir++;
	} else {
	    dir_length = strlen (try_dir);
	}
	xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	if ((in = fopen(xname, "r")) != NULL) {
	    include_level += 1;
	    scanner.push();
	    scanner.attach(xname, in);
	    curr_token = new token(xname, TKN_PUSH_FILE);
	    curr_token->out_text = fname;
	    return 1;
	}
    }
    warning(line, pos, file_name, "can't include file %s", fname);
    curr_token = new token(dprintf("/*#include \"%s\"*/", fname),
	                   TKN_CMNT, line, pos);
    return 1;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 408 "lex.l"
{
    error(line, pos, file_name, "unrecognized token: %s\n",
		yytext);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 413 "lex.l"
{
    char *fname = include_name (yytext+3);
    char *xname;
    FILE *in = NULL;
    char *try_dir, *next_dir;
    int dir_length;

    for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
	    dir_length = next_dir - try_dir;
	    next_dir++;
	} else {
	    dir_length = strlen (try_dir);
	}
	xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	if ((in = fopen(xname, "r")) != NULL) {
	    include_level += 1;
	    scanner.push();
	    scanner.attach(xname, in);
	    curr_token = new token(xname, TKN_PUSH_FILE);
	    curr_token->out_text = fname;
	    return 1;
	}
    }
    warning(line, pos, file_name, "can't include file %s", fname);
    curr_token = new token(dprintf("/*#include \"%s\"*/", fname),
	                   TKN_CMNT, line, pos);
    return 1;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(use):
#line 443 "lex.l"
{
    if (scanner.empty()) {
	return -1;  // MAGIC ! (< 0 means end of files)
    } else {
	scanner.pop();
	include_level -= 1;
	curr_token =  new token((char*)NULL, TKN_POP_FILE);
	return 1;
    }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 454 "lex.l"
{ return process_end_of_line_comment(); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 455 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 456 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 457 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 459 "lex.l"
{ return tkn(TKN_LPAR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 460 "lex.l"
{ return tkn(TKN_RPAR); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 461 "lex.l"
{ text = "["; return tkn(TKN_LBR);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 462 "lex.l"
{ text = "]"; return tkn(TKN_RBR);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 463 "lex.l"
{ return tkn(TKN_LBR);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 464 "lex.l"
{ return tkn(TKN_RBR);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 465 "lex.l"
{ return tkn(TKN_MUL);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 466 "lex.l"
{ return tkn(TKN_PLUS); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 467 "lex.l"
{ return tkn(TKN_MINUS);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 468 "lex.l"
{ return tkn(TKN_C_SHR); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 469 "lex.l"
{ return tkn(TKN_C_SHL);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 470 "lex.l"
{ return tkn(TKN_C_AND);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 471 "lex.l"
{ return tkn(TKN_C_OR);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 472 "lex.l"
{ return tkn(TKN_LETMUL);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 473 "lex.l"
{ return tkn(TKN_LETADD); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 474 "lex.l"
{ return tkn(TKN_LETSUB);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 475 "lex.l"
{ return tkn(TKN_LETSHR); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 476 "lex.l"
{ return tkn(TKN_LETSHL);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 477 "lex.l"
{ return tkn(TKN_LETAND);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 478 "lex.l"
{ return tkn(TKN_LETOR);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 479 "lex.l"
{ return tkn(TKN_LETDIV);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 480 "lex.l"
{ return tkn(TKN_C_NOT);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 481 "lex.l"
{ return tkn(TKN_COMMA);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 482 "lex.l"
{ return tkn(TKN_DOT);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 483 "lex.l"
{ return tkn(TKN_DOTS); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 484 "lex.l"
{ return tkn(TKN_DIVR);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 485 "lex.l"
{ return turbo_pascal ? tkn(TKN_ADDR) : tkn(TKN_HEAP); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 486 "lex.l"
{ if (turbo_pascal && !type_or_var_context
		  && curr_token->tag != TKN_HEAP
                  && curr_token->tag != TKN_RBR && curr_token->tag != TKN_RPAR
		  && curr_token->tag != TKN_REF
		  && curr_token->tag != TKN_IDENT
		  && curr_token->cat != CAT_ID)
               {
		   text = dprintf("#%d", yyinput() & 31);
		   return tkn(TKN_SCONST);
              }
	      return tkn(TKN_HEAP);
            }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 498 "lex.l"
{ return tkn(TKN_LET);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 499 "lex.l"
{ return tkn(TKN_COLON);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 500 "lex.l"
{ return tkn(TKN_SEMICOLON); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 501 "lex.l"
{ return tkn(TKN_LE);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 502 "lex.l"
{ return tkn(TKN_GE);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 503 "lex.l"
{ return tkn(TKN_LT);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 504 "lex.l"
{ return tkn(TKN_GT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 505 "lex.l"
{ return tkn(TKN_EQ);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 506 "lex.l"
{ return tkn(TKN_NE);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 509 "lex.l"
{ return tkn(TKN_RCONST); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 510 "lex.l"
{ return tkn(TKN_ICONST);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 512 "lex.l"
{
               char lc_buf[MAX_ID_LENGTH];
	       char *src = yytext, *dst = lc_buf;
	       if (*yytext == '$') {
                   if (turbo_pascal) { /* hexademical number */
  	               return tkn(TKN_ICONST);
                   } else if (ignore_preprocessor_directives) {
                       int c;
                       char cmt_buffer[1024];
                       int i = sprintf(cmt_buffer, "/*%s", yytext);
                       curr_token = new token(NULL, TKN_CMNT, line, pos);
                       pos += strlen(yytext);
 	               while((c = yyinput_file()) != EOF && c != '\n') {
                             if (i == (int)sizeof(cmt_buffer)-4) {
                                 error(line, pos, file_name, "Preprocessor directive too long\n");
                             } else {
                                 cmt_buffer[i++] = (char)c;
                             }
                        }
                        cmt_buffer[i++] = '*';
                        cmt_buffer[i++] = '/';
                        cmt_buffer[i++] = '\n';
                        cmt_buffer[i++] = '\0';
               		char* cmt_text = new char[i];
		        memcpy(cmt_text, cmt_buffer, i);
                        curr_token->in_text = curr_token->out_text = cmt_text;
                        return 1;
                   }
 	       }
	       do {
	           *dst++ = tolower(*(unsigned char*)src);
	       } while (*src++);
	       nm = nm_entry::add(lc_buf, TKN_IDENT);
	       int tag = nm->tag;

	       if (turbo_pascal) {
	           if (tag == TKN_TYPE || tag == TKN_VAR) {
		       type_or_var_context = TRUE;
	           } else if (tag == TKN_BEGIN || tag == TKN_CONST) {
		       type_or_var_context = FALSE;
		   } else if (tag == TKN_IMPLEMENTATION) {
		       if (include_level > 0)  {
		           scanner.pop();
		           include_level -= 1;
			   BEGIN(use);
			   curr_token = new token((char*)NULL, TKN_UNIT_END);
                           return 1;
                       } else {
		           return tkn(TKN_IMPLEMENTATION);
                       }
		   } else if (tag == TKN_INTERFACE) {
                       if (use_chain == NULL) {
                           use_chain = new use_ctx(file_name, NULL);
                       }
		       tkn(TKN_INTERFACE);
		       return 1;
		   }
               }
	       if (tag == TKN_RESERVED) {
	           text = dprintf("%s_", lc_buf);
	           nm = nm_entry::add(text, TKN_IDENT);
	           tag = TKN_IDENT;
	       } else if (!preserve_case || tag != TKN_IDENT) {
	           text = mystrdup(lc_buf);
	       }
	       return tkn(tag);
             }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 581 "lex.l"
{ return tkn(TKN_SCONST); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 583 "lex.l"
{ return tkn(TKN_SPACE); }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 585 "lex.l"
{ return tkn(TKN_LN); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 587 "lex.l"
{
                error(line, pos, file_name, "unrecognized token: %s\n",
		      yytext);
             }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 592 "lex.l"
ECHO;
	YY_BREAK
#line 3053 "lex.cxx"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start)];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	int yy_c = 256;
	const struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (_isatty( _fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 592 "lex.l"


void scan_ctx::push() {
    assert(sp < MAX_INCLUDE_DEPTH);
    stack[sp].file_name = file_name;
    stack[sp].buffer = YY_CURRENT_BUFFER;
    stack[sp].search_path = i_path;
    stack[sp].pos = pos;
    stack[sp].line = line;
    stack[sp].input = yyin;
    sp += 1;
}


void scan_ctx::attach(char* name, FILE* in) {
    pos = 0;
    line = 1;
    file_name = name;
    yyin = in;
    char* base_name = strrchr(name, PATH_SEP);
    if (base_name != NULL) {
	i_path = dprintf("%.*s%c%s", base_name-name, name, path_sep, i_path);
    }
    yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
}

void scan_ctx::pop() {
    assert(sp > 0);
    sp -= 1;
    pos = stack[sp].pos;
    line = stack[sp].line;
    file_name = stack[sp].file_name;
    fclose(yyin);
    yyin = stack[sp].input;
    i_path = stack[sp].search_path;
    yy_switch_to_buffer(stack[sp].buffer);
}

bool scan_ctx::find(char* name) {
    for (int i = 0; i < sp; i ++ ) {
	if (strcmp(stack[i].file_name, name) == 0) {
	    return TRUE;
	}
    }
    return FALSE;
}


